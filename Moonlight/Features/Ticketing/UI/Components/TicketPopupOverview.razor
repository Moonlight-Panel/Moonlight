@using Microsoft.EntityFrameworkCore
@using MoonCore.Abstractions
@using MoonCore.Helpers

@using Moonlight.Core.Services
@using Moonlight.Features.Ticketing.Entities

@inject Repository<Ticket> TicketRepository
@inject IdentityService IdentityService

<div class="card-header">
    <span class="card-title fs-5">Your tickets</span>
    <div class="card-toolbar">
        <button @onclick="() => TicketPopupMain.SetViewIndex(0)" class="btn btn-rounded-circle btn-icon">
            <i class="bx bx-sm bx-x"></i>
        </button>
    </div>
</div>
<div class="card-body pt-5">
    <div class="scroll-y me-n5 pe-5" style="height: 50vh; width: 40vh; display: flex; flex-direction: column;">
        <div class="d-flex flex-stack py-2">
            <div class="btn-group w-100">
                <button class="btn btn-primary" type="button" @onclick="() => TicketPopupMain.SetViewIndex(3)">Create ticket</button>
                @if (ViewClosed)
                {
                    <button class="btn btn-success" type="button" @onclick="ToggleViewClosed">Open tickets</button>
                }
                else
                {
                    <button class="btn btn-danger" type="button" @onclick="ToggleViewClosed">Closed tickets</button>
                }
            </div>
        </div>

        <div class="d-flex flex-stack py-4">
        </div>

        <LazyLoader @ref="LazyLoader" Load="LoadTickets">
            @if (Tickets.Any())
            {
                foreach (var ticket in Tickets)
                {
                    <a href="#" @onclick="() => TicketPopupMain.OpenTicket(ticket)" @onclick:preventDefault class="d-flex flex-stack py-4">
                        <div class="d-flex align-items-center">
                            <div>
                                <a href="#" class="fs-5 fw-bold text-gray-900 text-hover-primary mb-2">@(ticket.Name)</a>
                                <div class="fw-semibold text-muted">@(ticket.Description.Length > 100 ? string.Concat(ticket.Description.Take(97)) : ticket.Description)</div>
                            </div>
                        </div>
                        <div class="d-flex flex-column align-items-end ms-2">
                            <span class="text-muted fs-7 mb-1">@(Formatter.FormatAgoFromDateTime(ticket.CreatedAt))</span>
                        </div>
                    </a>

                    if (ticket.Id != Tickets.Last().Id)
                    {
                        <span class="separator"></span>
                    }
                }
            }
            else
            {
                <div class="text-center text-muted fs-5">No @(ViewClosed ? "closed" : "open") tickets found</div>
            }
        </LazyLoader>
    </div>
</div>

@code
{
    [CascadingParameter]
    public TicketPopupMain TicketPopupMain { get; set; }

    private LazyLoader LazyLoader;
    
    private Ticket[] Tickets;
    private bool ViewClosed = false;

    private Task LoadTickets(LazyLoader _)
    {
        Tickets = TicketRepository
            .Get()
            .Where(x => x.Creator.Id == IdentityService.CurrentUser.Id)
            .Where(x => x.Open == !ViewClosed)
            .ToArray();

        return Task.CompletedTask;
    }

    private async Task ToggleViewClosed()
    {
        ViewClosed = !ViewClosed;
        await InvokeAsync(StateHasChanged);

        await LazyLoader.Reload();
    }
}