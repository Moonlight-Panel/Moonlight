@page "/admin/sys/themes"

@using BlazorTable
@using Mappy.Net
@using Microsoft.AspNetCore.Components.Forms
@using MoonCore.Abstractions
@using MoonCore.Exceptions
@using MoonCoreUI.Services

@using Moonlight.Core.Extensions.Attributes
@using Moonlight.Core.Models.Enums


@using Moonlight.Features.Theming.Entities
@using Moonlight.Features.Theming.Models
@using Moonlight.Features.Theming.Models.Forms
@using Newtonsoft.Json

@attribute [RequirePermission(Permission.AdminRoot)]

@inject ToastService ToastService
@inject Repository<Theme> ThemeRepository
@inject FileDownloadService DownloadService

<AdminSysNavigation Index="2"/>

<div class="mt-5">
    <AutoCrud TItem="Theme"
              TCreateForm="AddThemeForm"
              TUpdateForm="EditThemeForm"
              Title="Manage themes"
              Load="LoadData">
        <Toolbar>
            <SmartCustomFileSelect @ref="ThemeFileSelect" OnFileSelected="ImportTheme">
                <div class="btn btn-secondary">
                    <i class="bx bx-sm bx-upload me-3"></i>
                    Import theme
                </div>
            </SmartCustomFileSelect>
        </Toolbar>
        <View>
            <Column TableItem="Theme" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="true"/>
            <Column TableItem="Theme" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true"/>
            <Column TableItem="Theme" Title="Author" Field="@(x => x.Author)" Sortable="true" Filterable="true"/>
            <Column TableItem="Theme" Field="@(x => x.Id)" Title="" Filterable="false" Sortable="false">
                <Template>
                    @if (context.Enabled)
                    {
                        <span class="text-success">Enabled</span>
                    }
                    else
                    {
                        <span class="text-muted">Disabled</span>
                    }
                </Template>
            </Column>
            <Column TableItem="Theme" Field="@(x => x.Id)" Title="" Filterable="false" Sortable="false">
                <Template>
                    <div class="text-end">
                        <div class="btn-group">
                            @if (!string.IsNullOrEmpty(context.DonateUrl))
                            {
                                <a class="btn btn-info" href="@(context.DonateUrl)" target="_blank">Donate</a>
                            }
                            <WButton OnClick="() => ExportTheme(context)" Text="Export" CssClasses="btn btn-secondary"/>
                        </div>
                    </div>
                </Template>
            </Column>
            <Pager ShowPageNumber="true" ShowTotalCount="true" AlwaysShow="true"/>
        </View>
    </AutoCrud>
</div>

@code
{
    private SmartCustomFileSelect ThemeFileSelect;
    private AutoCrud<Theme, AddThemeForm, EditThemeForm> AutoCrud;

    private Theme[] LoadData(Repository<Theme> repository)
    {
        return repository.Get().ToArray();
    }

    private async Task ExportTheme(Theme theme)
    {
        var model = Mapper.Map<ThemeExport>(theme);
        
        var json = JsonConvert.SerializeObject(model, Formatting.Indented);

        await ToastService.Info("Starting image download");
        await DownloadService.DownloadString($"{model.Name}.json", json);
    }

    private async Task ImportTheme(IBrowserFile file)
    {
        try
        {
            if (file.ContentType != "application/json")
                throw new DisplayException("Unknown file type. Only .json is supported");

            var stream = file.OpenReadStream();
            var streamReader = new StreamReader(stream);
            var text = await streamReader.ReadToEndAsync();
            var theme = JsonConvert.DeserializeObject<ThemeImport>(text);

            if (theme == null)
                throw new DisplayException("Unable to parse theme json");

            var themeDb = Mapper.Map<Theme>(theme);
            ThemeRepository.Add(themeDb);
            
            await ToastService.Success($"Successfully imported theme '{theme.Name}'");
            
            await AutoCrud.Reload();
        }
        catch (DisplayException e)
        {
            await ToastService.Danger(e.Message);
        }
        finally
        {
            await ThemeFileSelect.RemoveSelection();
        }
    }
}