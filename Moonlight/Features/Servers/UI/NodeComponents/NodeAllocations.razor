@using System.ComponentModel.DataAnnotations
@using Moonlight.Features.Servers.Entities
@using MoonCore.Abstractions
@using MoonCore.Exceptions


@inject Repository<ServerNode> NodeRepository
@inject Repository<ServerAllocation> AllocationRepository
@inject Repository<Server> ServerRepository
@inject AlertService AlertService
@inject ToastService ToastService

<div class="row">
    <div class="col-md-4 col-12">
        <div class="card mb-3">
            <div class="card-header">
                <span class="card-title">Allocation Quick Add</span>
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input @bind="IpAddress" class="form-control" placeholder="Ip address"/>
                </div>
                <div class="input-group mb-3">
                    <input @bind="AllocationStart" class="form-control w-25" type="number"/>
                    <span class="input-group-text">-</span>
                    <input @bind="AllocationEnd" class="form-control w-25" type="number"/>
                </div>
                <div class="d-flex justify-content-end">
                    <WButton OnClick="AddAllocations" CssClasses="btn btn-primary">
                        Add
                    </WButton>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-8 col-12">
        <FastCrud TItem="ServerAllocation"
                  Loader="Loader"
                  OnConfigure="OnConfigure"
                  OnConfigureCreate="OnConfigureForm"
                  OnConfigureEdit="OnConfigureForm"
                  @ref="Crud">
            <View>
                <MCBColumn TItem="ServerAllocation" Field="@(x => x.Id)" Title="Id"/>
                <MCBColumn TItem="ServerAllocation" Field="@(x => x.IpAddress)" Title="Ip address"/>
                <MCBColumn TItem="ServerAllocation" Field="@(x => x.Port)" Title="Port"/>
            </View>
            <ViewToolbar>
                <WButton CssClasses="btn btn-icon btn-danger me-2" OnClick="DeleteAllAllocations">
                    <i class="bx bx-sm bx-trash"></i>
                </WButton>
            </ViewToolbar>
        </FastCrud>
    </div>
</div>

@code
{
    [Parameter] public ServerNode Node { get; set; }

    private FastCrud<ServerAllocation> Crud;
    
    // Quick add values
    private string IpAddress = "0.0.0.0";
    private int AllocationStart = 2000;
    private int AllocationEnd = 3000;

    private async Task AddAllocations()
    {
        if (string.IsNullOrEmpty(IpAddress))
            throw new DisplayException("You need to provide an ip address");
        
        int skipped = 0;
        int added = 0;

        for (int i = AllocationStart; i <= AllocationEnd; i++)
        {
            if (Node!.Allocations.Any(x => x.Port == i && x.IpAddress == IpAddress))
                skipped++;
            else
            {
                Node.Allocations.Add(new()
                {
                    Port = i,
                    IpAddress = IpAddress
                });

                added++;
            }
        }

        NodeRepository.Update(Node!);

        await ToastService.Success($"Added {added} allocations and skipped {skipped} ports due to existing allocations");
        await Crud.Refresh(fullRefresh: true);
    }

    private async Task DeleteAllAllocations()
    {
        await AlertService.Confirm("Confirm mass deletion", "Do you really want to delete all allocations?", async () =>
        {
            foreach (var allocation in Node!.Allocations.ToArray()) // To array in order to prevent collection modified exception
            {
                // Check if a server is using this allocation before deleting

                if (ServerRepository
                    .Get()
                    .Any(x => x.Allocations.Any(y => y.Id == allocation.Id)))
                {
                    await ToastService.Danger($"Unable to delete allocation with port {allocation.Port} due to a server using this allocation");
                    continue;
                }

                AllocationRepository.Delete(allocation);
            }

            await ToastService.Success("Successfully deleted allocations");
            await Crud.Refresh(fullRefresh: true);
        });
    }

    private IEnumerable<ServerAllocation> Loader(Repository<ServerAllocation> _)
    {
        return Node.Allocations;
    }

    private void OnConfigure(FastCrudConfiguration<ServerAllocation> configuration)
    {
        configuration.ValidateCreate = allocation =>
        {
            if (Node.Allocations.Any(x => x.Port == allocation.Port && x.IpAddress == allocation.IpAddress))
                throw new DisplayException("A allocation with these ip and port does already exist");
            
            return Task.CompletedTask;
        };

        configuration.ValidateEdit = allocation =>
        {
            if (Node.Allocations.Any(x => x.Port == allocation.Port && x.IpAddress == allocation.IpAddress && x.Id != allocation.Id))
                throw new DisplayException("A allocation with these ip and port does already exist");
            
            return Task.CompletedTask;
        };

        configuration.ValidateDelete = allocation =>
        {
            // Check if allocation is associated with a server
            var serverWithThisAllocation = ServerRepository
                .Get()
                .FirstOrDefault(x => x.Allocations.Any(y => y.Id == allocation.Id));

            if (serverWithThisAllocation != null)
            {
                throw new DisplayException($"The server '{serverWithThisAllocation.Name}' (ID: {serverWithThisAllocation.Id}) is using this allocation. Delete the server in order to delete this allocation");
            }

            return Task.CompletedTask;
        };

        configuration.CustomCreate = allocation =>
        {
            Node.Allocations.Add(allocation);
            NodeRepository.Update(Node);
            
            return Task.CompletedTask;
        };

        /*
        configuration.CustomEdit = allocation =>
        {
            AllocationRepository.Update(allocation);
            return Task.CompletedTask;
        };*/

        configuration.CustomDelete = allocation =>
        {
            Node.Allocations.Remove(allocation);
            NodeRepository.Update(Node);

            try
            {
                AllocationRepository.Delete(allocation);
            }
            catch (Exception)
            {
                /* do not fail here */
            }

            return Task.CompletedTask;
        };
    }

    private void OnConfigureForm(FastFormConfiguration<ServerAllocation> configuration, ServerAllocation _)
    {
        configuration.AddProperty(x => x.IpAddress)
            .WithDefaultComponent()
            .WithValidation(FastFormValidators.Required)
            .WithValidation(RegexValidator.Create("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", "You need to provide a valid ipv4 address"));

        configuration.AddProperty(x => x.Port)
            .WithDefaultComponent()
            .WithValidation(x => x >= 1 && x <= 65535 ? ValidationResult.Success : new ValidationResult("You need to provide a valid port"));
    }
}