@page "/servers/networks"

@using System.ComponentModel.DataAnnotations
@using Moonlight.Features.Servers.UI.Components
@using Moonlight.Features.Servers.Entities
@using Moonlight.Features.Servers.Models.Forms.Users.Networks
@using MoonCore.Abstractions
@using Moonlight.Core.Services
@using Microsoft.EntityFrameworkCore
@using MoonCore.Blazor.Forms.Fast.Components
@using MoonCore.Blazor.Models.Fast
@using MoonCore.Exceptions

@inject IdentityService IdentityService
@inject Repository<Server> ServerRepository

<ServersNavigation Index="1"/>

<FastCrud TItem="ServerNetwork"
          Loader="Loader"
          OnConfigure="OnConfigure"
          OnConfigureCreate="OnConfigureCreate"
          OnConfigureEdit="OnConfigureEdit">
    <View>
        <MCBColumn TItem="ServerNetwork" Field="@(x => x.Name)" Title="Name"/>
        <MCBColumn TItem="ServerNetwork" Title="Node">
            <Template>
                <span>@(context!.Node.Name)</span>
            </Template>
        </MCBColumn>
        <MCBColumn TItem="ServerNetwork" Title="Used by">
            <Template>
                @{
                var servers = UsedByCache.ContainsKey(context.Id) ? UsedByCache[context.Id] : Array.Empty<Server>();
                }

                <span>
                    @foreach (var server in servers)
                    {
                    <span><a href="/server/@(server.Id)">@(server.Name)</a> @(server != servers.Last() ? "," : "")</span>
                    }
                </span>
            </Template>
        </MCBColumn>
    </View>
</FastCrud>

@code
{
    private readonly Dictionary<int, Server[]> UsedByCache = new();

    private IEnumerable<ServerNetwork> Loader(Repository<ServerNetwork> repository)
    {
        var result = repository
            .Get()
            .Include(x => x.Node)
            .Where(x => x.User.Id == IdentityService.CurrentUser.Id);

        UsedByCache.Clear();

        foreach (var network in result)
        {
            var serversUsingThisNetwork = ServerRepository
                .Get()
                .Where(x => x.Network.Id == network.Id)
                .Where(x => x.Owner.Id == IdentityService.CurrentUser.Id)
                .ToArray();

            UsedByCache.Add(network.Id, serversUsingThisNetwork);
        }

        return result;
    }

    private void OnConfigure(FastCrudConfiguration<ServerNetwork> configuration)
    {
        configuration.ValidateCreate = network =>
        {
            if (!ServerRepository
                    .Get()
                    .Any(x => x.Node.Id == network.Node.Id && x.Owner.Id == IdentityService.CurrentUser.Id))
            {
                throw new DisplayException("You need a server on the selected node in order to create a network on the node");
            }

            //TODO: Add config to check the amount of networks created

            // Set user as the crud is not allowed to set it (user crud and so on)
            network.User = IdentityService.CurrentUser;

            return Task.CompletedTask;
        };
    }

    private void OnConfigureCreate(FastConfiguration<ServerNetwork> configuration, ServerNetwork _)
    {
        configuration.AddProperty(x => x.Name)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required);

        Func<ServerNode, string> nodeDisplayField = x => x.Name;
        
        configuration.AddProperty(x => x.Node)
            .WithComponent<ServerNode, SelectComponent<ServerNode>>()
            .WithAdditionalOption("DisplayField", nodeDisplayField)
            .WithValidation<ServerNode>(x => x != null ? ValidationResult.Success : new ValidationResult("You need to specify a node"));
    }

    private void OnConfigureEdit(FastConfiguration<ServerNetwork> configuration, ServerNetwork _)
    {
        configuration.AddProperty(x => x.Name)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required);
    }
}