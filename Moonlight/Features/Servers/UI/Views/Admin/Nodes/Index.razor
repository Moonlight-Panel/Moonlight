@page "/admin/servers/nodes"
@using Moonlight.Features.Servers.UI.Components
@using Moonlight.Features.Servers.Entities
@using MoonCore.Abstractions
@using Microsoft.EntityFrameworkCore
@using MoonCore.Exceptions
@using MoonCore.Helpers
@using System.Text.RegularExpressions;
@using Moonlight.Features.Servers.Api.Resources
@using Moonlight.Features.Servers.Services
@using Moonlight.Features.Servers.UI.NodeComponents

@inject Repository<Server> ServerRepository
@inject Repository<ServerNode> NodeRepository
@inject NodeService NodeService
@inject IServiceProvider ServiceProvider
@inject ILogger<Index> Logger

@implements IDisposable

@attribute [RequirePermission(5001)]

<AdminServersNavigation Index="1"/>

<LazyLoader Load="Load">
    <FastCrud TItem="ServerNode"
              Loader="Loader"
              OnConfigure="OnConfigure"
              OnConfigureCreate="OnConfigureCreate"
              OnConfigureEdit="OnConfigureEdit">
        <View>
            <MCBColumn TItem="ServerNode" Field="@(x => x.Id)" Title="Id"/>
            <MCBColumn TItem="ServerNode" Field="@(x => x.Name)" Title="Name">
                <Template>
                    @*<a href="/admin/servers/nodes/view/@(context!.Id)"></a> TODO: Make this work again*@

                    @context!.Name
                </Template>
            </MCBColumn>
            <MCBColumn TItem="ServerNode" Field="@(x => x.Fqdn)" Title="Fqdn"/>
            <MCBColumn TItem="ServerNode" Title="Status">
                <Template>
                    @if (NodeStats.ContainsKey(context!.Id))
                    {
                        if (NodeStats[context.Id] == null)
                        {
                            <span class="text-danger">Offline</span>
                        }
                        else
                        {
                            <span class="text-success">Online</span>
                        }
                    }
                    else
                    {
                        <span class="text-muted">N/A</span>
                    }
                </Template>
            </MCBColumn>
            <MCBColumn TItem="ServerNode" Title="CPU">
                <Template>
                    @if (NodeStats.ContainsKey(context!.Id) && NodeStats[context.Id] != null)
                    {
                        var cores = NodeStats[context!.Id]!.Hardware.Cores;
                        var percent = cores.Any() ? Math.Round(cores.Average(x => x.Usage), 2) : 0;

                        <ColoredBar Value="percent"/>
                    }
                    else
                    {
                        <span class="text-muted">N/A</span>
                    }
                </Template>
            </MCBColumn>
            <MCBColumn TItem="ServerNode" Title="Memory">
                <Template>
                    @if (NodeStats.ContainsKey(context!.Id) && NodeStats[context.Id] != null)
                    {
                        var memory = NodeStats[context!.Id]!.Hardware.Memory;

                        var used = memory.Total - (memory.Available + memory.Cached);
                        var percent = Math.Round((float)used / memory.Total * 100F, 2);

                        //Logger.Debug($"Used: {used} Total: {memory.Total} => {percent}% ({Formatter.FormatSize(used)} / {Formatter.FormatSize(memory.Total)})");

                        <ColoredBar Value="percent"/>
                    }
                    else
                    {
                        <span class="text-muted">N/A</span>
                    }
                </Template>
            </MCBColumn>
            <MCBColumn TItem="ServerNode" Title="Disk">
                <Template>
                    @if (NodeStats.ContainsKey(context!.Id) && NodeStats[context.Id] != null)
                    {
                        var disk = NodeStats[context!.Id]!.Hardware.Disk;
                        var percent = Math.Round(100F - (float)disk.Free / disk.Total * 100F, 2);

                        <ColoredBar Value="percent"/>
                    }
                    else
                    {
                        <span class="text-muted">N/A</span>
                    }
                </Template>
            </MCBColumn>
        </View>
    </FastCrud>
</LazyLoader>

@code
{
    private Timer UpdateTimer;
    private Dictionary<int, SystemStatus?> NodeStats = new();

    private Task Load(LazyLoader lazyLoader)
    {
        UpdateTimer = new(async _ =>
        {
            try
            {
                NodeStats.Clear();

                using var scope = ServiceProvider.CreateScope();
                var nodeRepo = scope.ServiceProvider.GetRequiredService<Repository<ServerNode>>();
                var nodes = nodeRepo.Get().ToArray();

                foreach (var node in nodes)
                {
                    try
                    {
                        var status = await NodeService.GetStatus(node);

                        NodeStats[node.Id] = status;
                    }
                    catch (Exception e)
                    {
                        Logger.LogWarning("Unable to fetch system status for node '{name}': {e}", node.Name, e);

                        NodeStats[node.Id] = null;
                    }

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception e)
            {
                Logger.LogError("Unable to update node stats due to an unhandled error: {e}", e);
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        return Task.CompletedTask;
    }
    
    private IEnumerable<ServerNode> Loader(Repository<ServerNode> repository)
    {
        return repository
            .Get()
            .Include(x => x.Allocations);
    }

    private void OnConfigure(FastCrudConfiguration<ServerNode> configuration)
    {
        configuration.ValidateDelete = node =>
        {
            if (ServerRepository
                .Get()
                .Any(x => x.Node.Id == node.Id))
            {
                throw new DisplayException("There are still servers on this node. Delete the servers in order to delete the node");
            }

            if (NodeRepository
                .Get()
                .Include(x => x.Allocations)
                .First(x => x.Id == node.Id)
                .Allocations
                .Any())
            {
                throw new DisplayException("There are still allocations on this node. Delete the allocations in order to delete the node");
            }

            return Task.CompletedTask;
        };

        configuration.ValidateCreate = node =>
        {
            ValidateFqdn(node);
            
            node.Token = Formatter.GenerateString(32);
            
            return Task.CompletedTask;
        };

        configuration.ValidateEdit = node =>
        {
            ValidateFqdn(node);

            return Task.CompletedTask;
        };
    }

    private void OnConfigureCreate(FastFormConfiguration<ServerNode> configuration, ServerNode _)
    {
        configuration.AddProperty(x => x.Name)
            .WithDefaultComponent()
            .WithValidation(FastFormValidators.Required);

        configuration.AddProperty(x => x.Fqdn)
            .WithDefaultComponent()
            .WithDescription("This needs to be the ip or domain of the node depending on the ssl settings")
            .WithValidation(FastFormValidators.Required);

        configuration.AddProperty(x => x.Ssl)
            .WithComponent<SwitchComponent>()
            .WithDescription("This enables ssl for the http connections to the node. Only enable this if you have the cert installed on the node");

        configuration.AddProperty(x => x.HttpPort)
            .WithDefaultComponent()
            .WithDescription("This is the http(s) port used by the node to allow communication to the node from the panel");

        configuration.AddProperty(x => x.FtpPort)
            .WithDefaultComponent()
            .WithDescription("This is the ftp port users can use to access their servers filesystem via their ftp client");
    }

    private void OnConfigureEdit(FastFormConfiguration<ServerNode> configuration, ServerNode node)
    {
        configuration.AddProperty(x => x.Name)
            .WithDefaultComponent()
            .WithPage("Settings")
            .WithValidation(FastFormValidators.Required);

        configuration.AddProperty(x => x.Fqdn)
            .WithDefaultComponent()
            .WithPage("Settings")
            .WithDescription("This needs to be the ip or domain of the node depending on the ssl settings")
            .WithValidation(FastFormValidators.Required);

        configuration.AddProperty(x => x.Ssl)
            .WithComponent<SwitchComponent>()
            .WithPage("Settings")
            .WithDescription("This enables ssl for the http connections to the node. Only enable this if you have the cert installed on the node");

        configuration.AddProperty(x => x.HttpPort)
            .WithDefaultComponent()
            .WithPage("Settings")
            .WithDescription("This is the http(s) port used by the node to allow communication to the node from the panel");

        configuration.AddProperty(x => x.FtpPort)
            .WithDefaultComponent()
            .WithPage("Settings")
            .WithDescription("This is the ftp port users can use to access their servers filesystem via their ftp client");

        configuration.AddCustomPage("Overview", ComponentHelper.FromType<NodeOverview>(parameters =>
        {
            parameters.Add("Node", node);
        }));
        
        configuration.AddCustomPage("Allocations", ComponentHelper.FromType<NodeAllocations>(parameters =>
        {
            parameters.Add("Node", node);
        }));

        configuration.AddCustomPage("Setup", ComponentHelper.FromType<NodeSetup>(parameters =>
        {
            parameters.Add("Node", node);
        }));
        
        configuration.AddCustomPage("Logs", ComponentHelper.FromType<NodeLogs>(parameters =>
        {
            parameters.Add("Node", node);
        }));
    }
    
    private void ValidateFqdn(ServerNode node)
    {
        if (node.Ssl)
        {
            // Is it a valid domain?
            if (Regex.IsMatch(node.Fqdn, "^(?!-)(?:[a-zA-Z\\d-]{0,62}[a-zA-Z\\d]\\.)+(?:[a-zA-Z]{2,})$"))
                return;

            throw new DisplayException("The fqdn needs to be a valid domain. If you want to use an ip address as the fqdn, disable ssl for this node");
        }
        else
        {
            // Is it a valid domain?
            if (Regex.IsMatch(node.Fqdn, "^(?!-)(?:[a-zA-Z\\d-]{0,62}[a-zA-Z\\d]\\.)+(?:[a-zA-Z]{2,})$"))
                return;

            // Is it a valid ip?
            if (Regex.IsMatch(node.Fqdn, "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"))
                return;

            throw new DisplayException("The fqdn needs to be either a domain or an ip");
        }
    }
    
    public void Dispose()
    {
        UpdateTimer?.Dispose();
    }
}