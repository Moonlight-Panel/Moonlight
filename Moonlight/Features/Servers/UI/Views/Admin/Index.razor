@page "/admin/servers"

@using Moonlight.Core.Extensions.Attributes
@using Moonlight.Core.Models.Enums

@using Moonlight.Features.Servers.UI.Components
@using Moonlight.Features.Servers.Entities
@using Moonlight.Features.Servers.Models.Forms.Admin
@using Microsoft.EntityFrameworkCore


@using BlazorTable
@using MoonCore.Abstractions
@using MoonCore.Exceptions
@using MoonCore.Helpers
@using Moonlight.Features.Servers.Models.Forms.Admin.Nodes

@attribute [RequirePermission(Permission.AdminServers)]

@inject Repository<ServerNode> NodeRepository

<AdminServersNavigation Index="0"/>

<AutoCrud TItem="ServerNode"
          TCreateForm="CreateNodeForm"
          TUpdateForm="UpdateNodeForm"
          Title="Manage nodes"
          Load="Load"
          ValidateAdd="ValidateAdd"
          ValidateDelete="ValidateDelete">
    <View>
        <Column TableItem="ServerNode" Field="@(x => x.Id)" Title="Id" />
        <Column TableItem="ServerNode" Field="@(x => x.Name)" Title="Name">
            <Template>
                <a href="/admin/servers/nodes/@(context.Id)">@(context.Name)</a>
            </Template>
        </Column>
        <Column TableItem="ServerNode" Field="@(x => x.Fqdn)" Title="Fqdn" />
        <Column TableItem="ServerNode" Field="@(x => x.Id)" Title="Status">
            <Template>
                <span class="text-success">Online</span>
            </Template>
        </Column>
    </View>
</AutoCrud>

@code
{
    private ServerNode[] Load(Repository<ServerNode> repository)
    {
        return repository.Get().ToArray();
    }

    private Task ValidateAdd(ServerNode node)
    {
        // Generate token
        node.Token = Formatter.GenerateString(32);
        
        return Task.CompletedTask;
    }

    private Task ValidateDelete(ServerNode n)
    {
        var nodeHasAllocations = NodeRepository
            .Get()
            .Include(x => x.Allocations)
            .First(x => x.Id == n.Id)
            .Allocations
            .Any();

        if (nodeHasAllocations)
            throw new DisplayException("The node still has allocations. Delete them in order to delete the node");
        
        return Task.CompletedTask;
    }
}