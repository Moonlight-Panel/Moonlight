@page "/admin/servers/images/{Id:int}/configparsing"

@using Moonlight.Features.Servers.Entities


@using Moonlight.Features.Servers.UI.Components

@using MoonCore.Exceptions
@using MoonCore.Abstractions
@using MoonCoreUI.Services

@inject Repository<ServerImage> ImageRepository
@inject ToastService ToastService

<LazyLoader ShowAsCard="true" Load="Load">
    @if (Image == null)
    {
        <NotFoundAlert />
    }
    else
    {
        <AdminImageViewNavigation Index="2" ImageId="@Id" />
        
        <ParseConfigEditor @ref="ParseConfigEditor" InitialContent="@Image.ParseConfigurations" />
        
        <div class="card card-body mt-5">
            <div class="d-flex justify-content-end">
                <WButton Text="Save" CssClasses="btn btn-success" OnClick="OnSave" />
            </div>
        </div>
    }
</LazyLoader>

@code
{
    [Parameter]
    public int Id { get; set; }

    private ServerImage? Image;

    private ParseConfigEditor ParseConfigEditor;

    private Task Load(LazyLoader arg)
    {
        Image = ImageRepository
            .Get()
            .FirstOrDefault(x => x.Id == Id);
        
        return Task.CompletedTask;
    }

    private async Task OnSave()
    {
        try
        {
            Image!.ParseConfigurations = await ParseConfigEditor.ValidateAndGet();
            ImageRepository.Update(Image);

            await ToastService.Success("Successfully updated image");
        }
        catch (DisplayException e)
        {
            await ToastService.Danger(e.Message);
        }
    }
}