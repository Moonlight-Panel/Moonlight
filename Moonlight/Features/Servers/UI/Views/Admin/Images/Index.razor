@page "/admin/servers/images"

@using Moonlight.Features.Servers.UI.Components
@using Microsoft.EntityFrameworkCore
@using MoonCore.Abstractions
@using MoonCore.Exceptions
@using MoonCoreUI.Services
@using MoonCoreUI.Components.NewAutoCrud
@using Moonlight.Features.Servers.Entities
@using Moonlight.Features.Servers.Helpers
@using Moonlight.Features.Servers.Models.Forms.Admin.Images
@using Microsoft.AspNetCore.Components.Forms
@using MoonCore.Helpers
@using Moonlight.Features.FileManager.UI.Components

@inject Repository<Server> ServerRepository
@inject Repository<ServerImageVariable> VariableRepository
@inject Repository<ServerDockerImage> DockerImageRepository
@inject Repository<ServerImage> ImageRepository

@inject ImageConversionHelper ImageConversionHelper
@inject FileDownloadService FileDownloadService
@inject ToastService ToastService
@inject AlertService AlertService

@attribute [RequirePermission(5002)]

<AdminServersNavigation Index="2"/>

<AutoCrud2 TItem="ServerImage"
          CreateForm="typeof(CreateImageForm)"
          EditForm="typeof(UpdateImageForm)"
          DataSource="Load"
          OnConfigure="OnConfigure"
          @ref="Crud">
    <View>
        <CrudColumn TItem="ServerImage" Field="@(x => x.Id)" Title="Id" Filterable="true"/>
        <CrudColumn TItem="ServerImage" Field="@(x => x.Name)" Title="Name" Filterable="true">
            <Template>
                <a href="/admin/servers/images/view/@context!.Id">@context.Name</a>
            </Template>
        </CrudColumn>
        <CrudColumn TItem="ServerImage" Field="@(x => x.Author)" Title="Author" Filterable="true"/>
        <CrudColumn TItem="ServerImage">
            <Template>
                <div class="text-end">
                    @if (!string.IsNullOrEmpty(context.UpdateUrl))
                    {
                        <a class="me-2" href="#" @onclick:preventDefault>
                            <i class="bx bx-refresh"></i>
                            Update
                        </a>
                    }

                    @if (!string.IsNullOrEmpty(context.DonateUrl))
                    {
                        <a class="me-2" href="@(context.DonateUrl)" target="_blank">
                            <i class="bx bxs-heart text-danger"></i>
                            Donate
                        </a>
                    }

                    <a href="#" class="me-2" @onclick:preventDefault @onclick="() => Export(context)">
                        <i class="bx bx-download"></i>
                        Export
                    </a>
                </div>
            </Template>
        </CrudColumn>
    </View>
    <NoItemsView>
        <IconAlert Title="No images found" Color="primary" Icon="bx-search-alt">
            Download and import a image from our <a href="https://github.com/Moonlight-Panel/Images">repository</a> or create a new one. Need help? Check out our <a href="https://docs.moonlightpanel.xyz">documentation</a>
        </IconAlert>
    </NoItemsView>
    <ViewToolbar>
        <SmartCustomFileSelect @ref="EggUpload" OnFileSelected="ImportEgg">
            <a class="btn btn-info me-3">
                Import egg
            </a>
        </SmartCustomFileSelect>
        <SmartCustomFileSelect @ref="ImageUpload" OnFileSelected="Import">
            <a class="btn btn-info me-3">
                Import
            </a>
        </SmartCustomFileSelect>
    </ViewToolbar>
    <CustomComponents>
        <CustomFormComponent TItem="ServerImage"
                             TForm="CreateImageForm"
                             Id="InstallScriptEditor">
            <div class="col-12">
                <Editor InitialContent="@context.InstallScript"
                        Mode="sh"
                        Lines="25"
                        EnableAutoInit="true"
                        OnChanged="OnChanged"/>
            </div>
            @{
                Task OnChanged(string arg)
                {
                    context.InstallScript = arg;
                    
                    return Task.CompletedTask;
                }
            }

        </CustomFormComponent>
    </CustomComponents>
    
</AutoCrud2>

@code
{
    private AutoCrud2<ServerImage> Crud;
    private SmartCustomFileSelect ImageUpload;
    private SmartCustomFileSelect EggUpload;

    private IEnumerable<ServerImage> Load(Repository<ServerImage> repository)
    {
        return repository.Get();
    }

    private Task ValidateDelete(ServerImage serverImage)
    {
        if (ServerRepository.Get().Any(x => x.Image.Id == serverImage.Id))
            throw new DisplayException("A server using this image exists. Please delete the servers using this image to continue");

        return Task.CompletedTask;
    }

    private Task ValidateAdd(ServerImage image)
    {
        // Set defaults
        
        image.AllowDockerImageChange = false;
        image.DefaultDockerImage = 0;
        image.ParseConfiguration = "[]";

        return Task.CompletedTask;
    }

    private Task CustomDelete(ServerImage serverImage)
    {
        var image = ImageRepository
            .Get()
            .Include(x => x.Variables)
            .Include(x => x.DockerImages)
            .First(x => x.Id == serverImage.Id);

        // Cache relational data
        var variables = image.Variables.ToArray();
        var dockerImages = image.DockerImages.ToArray();

        // Unlink data
        image.DockerImages.Clear();
        image.Variables.Clear();

        // Save changes
        ImageRepository.Update(image);

        // Delete variables (errors ignored)
        foreach (var variable in variables)
        {
            try
            {
                VariableRepository.Delete(variable);
            }
            catch (Exception)
            {
                /* this should not fail the operation */
            }
        }

        // Delete docker images (errors ignored)
        foreach (var dockerImage in dockerImages)
        {
            try
            {
                DockerImageRepository.Delete(dockerImage);
            }
            catch (Exception)
            {
                /* this should not fail the operation */
            }
        }

        ImageRepository.Delete(serverImage);

        return Task.CompletedTask;
    }

    private async Task Export(ServerImage image)
    {
        var json = await ImageConversionHelper.ExportAsJson(image);
        var imageName = image.Name.Replace(" ", "");
        await FileDownloadService.DownloadString($"{imageName}.json", json);

        await ToastService.Success($"Successfully exported '{image.Name}'");
    }

    private async Task Import(IBrowserFile file)
    {
        try
        {
            var stream = file.OpenReadStream();

            using var sr = new StreamReader(stream);
            var content = await sr.ReadToEndAsync();

            var image = await ImageConversionHelper.ImportFromJson(content);

            ImageRepository.Add(image);
            await ToastService.Success($"Successfully imported '{image.Name}'");

            await ImageUpload.RemoveSelection();
            await Crud.Reload();
        }
        catch (DisplayException)
        {
            throw;
        }
        catch (Exception e)
        {
            Logger.Warn("An error occured while importing a image");
            Logger.Warn(e);

            await ToastService.Danger("Unable to import egg: " + e.Message);
        }
        finally
        {
            await ImageUpload.RemoveSelection();
        }
    }

    private async Task ImportEgg(IBrowserFile file)
    {
        var confirm = await AlertService.YesNo("Importing pterodactyl eggs is a experimental feature and may result in unusable images. Are you sure you want to proceed?",
            "Yes, i take the risk",
            "Cancel");

        if (!confirm)
        {
            await EggUpload.RemoveSelection();
            return;
        }

        try
        {
            var stream = file.OpenReadStream();

            using var sr = new StreamReader(stream);
            var content = await sr.ReadToEndAsync();

            var image = await ImageConversionHelper.ImportFromEggJson(content);

            ImageRepository.Add(image);
            await ToastService.Success($"Successfully imported '{image.Name}'");

            await EggUpload.RemoveSelection();
            await Crud.Reload();
        }
        catch (DisplayException)
        {
            throw;
        }
        catch (Exception e)
        {
            Logger.Warn("An error occured while importing a pterodactyl egg");
            Logger.Warn(e);

            await ToastService.Danger("Unable to import egg: " + e.Message);
        }
        finally
        {
            await EggUpload.RemoveSelection();
        }
    }

    private void OnConfigure(AutoCrudOptions2<ServerImage> options)
    {
        options.CustomDelete = CustomDelete;
        options.ValidateCreate = ValidateAdd;
        options.ValidateDelete = ValidateDelete;
    }
}