@using MoonCore.Abstractions
@using MoonCore.Blazor.Forms.Fast.Components
@using MoonCore.Blazor.Models.Fast
@using MoonCore.Blazor.Models.Fast.Validators
@using MoonCore.Exceptions
@using Moonlight.Features.Servers.Entities

@inject Repository<ServerImage> ImageRepository
@inject Repository<ServerDockerImage> DockerImageRepository

@*
<div class="card mb-10">
    <div class="card-body">
        <div class="row g-8">
            <div class="col-md-6 col-12">
                <label class="form-label">Default docker image</label>
                <MCBSelect TField="ServerDockerImage"
                           @bind-Value="SelectedDockerImage"
                           Items="Image.DockerImages"
                           DisplayField="@(x => x.Name)"
                           CanBeNull="true"/>
            </div>
            <div class="col-md-6 col-12">
                <label class="form-label">Allow user to change the docker image</label>
                <div class="form-check">
                    <InputCheckbox @bind-Value="Form.AllowDockerImageChange" class="form-check-input"/>
                </div>
            </div>
        </div>
    </div>
</div>*@

<FastCrud TItem="ServerDockerImage"
          Loader="Loader"
          OnConfigure="OnConfigure"
          OnConfigureCreate="OnConfigureForm"
          OnConfigureEdit="OnConfigureForm">
    <View>
        <MCBColumn TItem="ServerDockerImage" Field="@(x => x.Id)" Title="Id"/>
        <MCBColumn TItem="ServerDockerImage" Field="@(x => x.DisplayName)" Title="Display name"/>
        <MCBColumn TItem="ServerDockerImage" Field="@(x => x.Name)" Title="Name"/>
        <MCBColumn TItem="ServerDockerImage" Field="@(x => x.AutoPull)" Title="Auto pull">
            <Template>
                @if (context.AutoPull)
                {
                <i class="bx bx-sm bx-check text-success"></i>
                }
                else
                {
                <i class="bx bx-sm bx-x text-danger"></i>
                }
            </Template>
        </MCBColumn>
    </View>
</FastCrud>

@code
{
    [Parameter] public ServerImage Image { get; set; }

    private IEnumerable<ServerDockerImage> Loader(Repository<ServerDockerImage> repository)
    {
        return Image.DockerImages;
    }

    private void OnConfigure(FastCrudConfiguration<ServerDockerImage> configuration)
    {
        configuration.CustomCreate = dockerImage =>
        {
            Image.DockerImages.Add(dockerImage);
            ImageRepository.Update(Image);
            
            return Task.CompletedTask;
        };

        configuration.CustomDelete = dockerImage =>
        {
            Image.DockerImages.Remove(dockerImage);
            ImageRepository.Update(Image);

            try
            {
                DockerImageRepository.Delete(dockerImage);
            }
            catch (Exception)
            {
                /* Dont fail here */
            }
            
            return Task.CompletedTask;
        };

        configuration.ValidateCreate = dockerImage =>
        {
            if (Image.DockerImages.Any(x => x.Name == dockerImage.Name))
                throw new DisplayException("A docker image with this name does already exist");
            
            return Task.CompletedTask;
        };
        
        configuration.ValidateEdit = dockerImage =>
        {
            if (Image.DockerImages.Any(x => x.Name == dockerImage.Name && x.Id != dockerImage.Id))
                throw new DisplayException("A docker image with this name does already exist");
            
            return Task.CompletedTask;
        };
    }

    private void OnConfigureForm(FastConfiguration<ServerDockerImage> configuration, ServerDockerImage _)
    {
        configuration.AddProperty(x => x.Name)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation(RegexValidator.Create("^(?:[a-zA-Z0-9\\-\\.]+\\/)?[a-zA-Z0-9\\-]+(?:\\/[a-zA-Z0-9\\-]+)*(?::[a-zA-Z0-9_\\.-]+)?$", "You need to provide a valid docker image name"))
            .WithDescription("This is the name of the docker image. E.g. moonlightpanel/moonlight:canary");

        configuration.AddProperty(x => x.DisplayName)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithDescription("This will be shown if the user is able to change the docker image as the image name");

        configuration.AddProperty(x => x.AutoPull)
            .WithComponent<bool, SwitchComponent>()
            .WithDescription("Specifies if the docker image should be pulled/updated when creating a server instance. Disable this for only local existing docker images");
    }
}