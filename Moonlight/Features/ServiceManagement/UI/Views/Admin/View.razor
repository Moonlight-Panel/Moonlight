@page "/admin/services/view/{Id:int}/{Route?}"

@using Microsoft.EntityFrameworkCore
@using MoonCore.Abstractions
@using Moonlight.Core.Extensions.Attributes
@using Moonlight.Core.Models.Enums
@using Moonlight.Core.Services
@using Moonlight.Features.ServiceManagement.Entities
@using Moonlight.Features.ServiceManagement.Models.Abstractions
@using Moonlight.Features.ServiceManagement.Services

@attribute [RequirePermission(Permission.AdminServices)]

@inject Repository<Service> ServiceRepository
@inject ServiceService ServiceService
@inject IdentityService IdentityService
@inject PluginService PluginService

<LazyLoader Load="Load" ShowAsCard="true">
    @if (Service == null)
    {
        <NotFoundAlert />
    }
    else
    {
        <CascadingValue Name="Service" Value="Service">
            <CascadingValue Name="Implementation" Value="Definition">
                <CascadingValue Name="Route" Value="Route">
                    <CascadingValue Name="ViewContext" Value="ViewContext">
                        @ViewContext.Layout
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    }
</LazyLoader>

@code
{
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public string? Route { get; set; }
    
    private Service? Service;
    private ServiceDefinition Definition;
    private ServiceViewContext ViewContext;

    private async Task Load(LazyLoader lazyLoader)
    {
        await lazyLoader.SetText("Requesting service");
        
        // Load service with relational data
        Service = ServiceRepository
            .Get()
            .Include(x => x.Product)
            .Include(x => x.Owner)
            .FirstOrDefault(x => x.Id == Id);

        if(Service == null)
            return;
        
        // Load implementation
        await lazyLoader.SetText("Loading implementation");
        Definition = ServiceService.Definition.Get(Service.Product.Type);
        
        // Build dynamic user interface
        await lazyLoader.SetText("Building dynamic user interface");

        ViewContext = new ServiceViewContext()
        {
            Service = Service,
            Product = Service.Product,
            User = IdentityService.CurrentUser
        };

        await Definition.BuildAdminView(ViewContext);
        await PluginService.BuildAdminServiceView(ViewContext);
    }
}