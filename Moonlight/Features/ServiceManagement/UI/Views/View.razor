@page "/service/{Id:int}/{Route?}"

@using Microsoft.EntityFrameworkCore
@using MoonCore.Abstractions
@using MoonCoreUI.Helpers
@using Moonlight.Features.ServiceManagement.UI.Components
@using Moonlight.Core.Services
@using Moonlight.Features.ServiceManagement.Entities
@using Moonlight.Features.ServiceManagement.Models.Abstractions
@using Moonlight.Features.ServiceManagement.Services

@inject Repository<Service> ServiceRepository
@inject ServiceService ServiceService
@inject IdentityService IdentityService
@inject PluginService PluginService

<LazyLoader Load="Load" ShowAsCard="true">
    @if (Service == null)
    {
        <NotFoundAlert />
    }
    else
    {
        if (NeedsRenewal)
        {
            <NeedsRenewalAlert />
        }
        else
        {
            @Layout
        }
    }
</LazyLoader>

@code
{
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public string? Route { get; set; }
    
    private Service? Service;
    private ServiceDefinition Definition;
    private ServiceViewContext ViewContext;

    private bool NeedsRenewal = false;

    private RenderFragment Layout;

    private async Task Load(LazyLoader lazyLoader)
    {
        await lazyLoader.SetText("Requesting service");
        
        // Load service with relational data
        Service = ServiceRepository
            .Get()
            .Include(x => x.Product)
            .Include(x => x.Owner)
            .FirstOrDefault(x => x.Id == Id);

        if(Service == null)
            return;
        
        // Check permissions
        if (!await ServiceService.Manage.CheckAccess(Service, IdentityService.CurrentUser))
            Service = null;

        if (Service == null)
            return;

        NeedsRenewal = await ServiceService.Manage.NeedsRenewal(Service);
        
        if(NeedsRenewal) // Stop loading more data
            return;
        
        // Load implementation
        await lazyLoader.SetText("Loading implementation");
        Definition = ServiceService.Definition.Get(Service.Product.Type);
        
        // Build dynamic user interface
        await lazyLoader.SetText("Building dynamic user interface");

        ViewContext = new ServiceViewContext()
        {
            Service = Service,
            Product = Service.Product,
            User = IdentityService.CurrentUser
        };

        await Definition.BuildUserView(ViewContext);
        await PluginService.BuildUserServiceView(ViewContext);

        Layout = ComponentHelper.FromType(ViewContext.Layout, parameters =>
        {
            parameters.Add("Service", Service);
            parameters.Add("Implementation", Definition);
            parameters.Add("Route", Route!);
            parameters.Add("ViewContext", ViewContext);
        });
    }
}