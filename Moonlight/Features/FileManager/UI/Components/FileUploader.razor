@using Moonlight.Features.FileManager.Models.Abstractions.FileAccess
@using Moonlight.Features.FileManager.Services

@inject DropzoneService DropzoneService
@inject SharedFileAccessService SharedFileAccessService

@implements IDisposable

<div class="d-flex justify-content-center">
    <div class="col-md-8" @ondrop:preventDefault>
        <div class="dropzone dropzone-queue" id="@DropzoneId">
            <div class="dropzone-panel mb-lg-0 mb-2">
                <div class="card border border-1 border-primary bg-secondary" style="pointer-events: none">
                    <div class="card-body">
                        <div class="text-center fs-1 fw-bold">
                            Drag a file or folder or <a class="dropzone-select" style="pointer-events: all">click to upload files</a>
                        </div>
                    </div>
                    <img src="/svg/upload.svg" class="card-img-bottom" alt="Upload icon" style="max-height: 15vw">
                </div>
            </div>
            <div class="dropzone-items wm-200px">
                <div class="dropzone-item" style="display:none">
                    <div class="dropzone-file">
                        <div class="dropzone-filename" title="some_image_file_name.jpg">
                            <span data-dz-name>some_image_file_name.jpg</span>
                            <strong>(<span data-dz-size>340kb</span>)</strong>
                        </div>
                        <div class="dropzone-error" data-dz-errormessage></div>
                    </div>
                    <div class="dropzone-progress">
                        <div class="progress">
                            <div
                                class="progress-bar bg-primary"
                                role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" data-dz-uploadprogress>
                            </div>
                        </div>
                    </div>
                    <div class="dropzone-toolbar">
                        <span class="dropzone-delete" data-dz-remove>
                            <i class="bx bx-x fs-1"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter] public IFileAccess FileAccess { get; set; }

    private CancellationTokenSource Cancellation = new();
    private string DropzoneId;

    protected override void OnInitialized()
    {
        DropzoneId = $"dropzone{GetHashCode()}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SharedFileAccessService.Register(FileAccess);
            
            var token = await SharedFileAccessService.GenerateToken(FileAccess);
            var url = $"/api/upload?token={token}";

            await DropzoneService.Create(DropzoneId, url);

            Task.Run(async () => // Update the dropzone url every 5 minutes so the token does not expire
            {
                while (!Cancellation.IsCancellationRequested)
                {
                    await Task.Delay(TimeSpan.FromMinutes(5));

                    var newToken = await SharedFileAccessService.GenerateToken(FileAccess);
                    var newUrl = $"/api/upload?token={newToken}";
                    await DropzoneService.UpdateUrl(DropzoneId, newUrl);
                }
            });
        }
    }

    public async void Dispose()
    {
        Cancellation.Cancel();
        await SharedFileAccessService.Unregister(FileAccess);
    }
}