@using Ganss.Xss
@using Microsoft.EntityFrameworkCore
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Services
@using Moonlight.Core.Models.Enums

@using Moonlight.Core.Services
@using Moonlight.Features.Community.Entities
@using Moonlight.Features.Community.Services

@inject Repository<Post> PostRepository
@inject IdentityService IdentityService
@inject PostService PostService
@inject ToastService ToastService

<div class="card card-flush">
    <div class="card-header pt-9">
        <div class="d-flex align-items-center">
            <div class="symbol symbol-50px me-5">
                <img src="/api/bucket/avatars/@(Post.Author.Avatar)" class="" alt="">
            </div>
            <div class="flex-grow-1">
                <span class="text-gray-800 text-hover-primary fs-4 fw-bold">@(Post.Author.Username)</span>
                <span class="text-gray-500 fw-semibold d-block">@(Formatter.FormatAgoFromDateTime(Post.CreatedAt))</span>
            </div>
        </div>

        @if (Post.Author.Id == IdentityService.CurrentUser.Id || IdentityService.Permissions[Permission.AdminCommunity])
        {
            <div class="card-toolbar">
                <a @onclick="DeletePost" @onclick:preventDefault href="#" class="text-danger fw-semibold d-block">Remove post</a>
            </div>
        }
    </div>
    <div class="card-body">
        <div class="fs-6 fw-normal text-gray-700">
            @if (IsEditing)
            {
                <TextEditor @bind-Value="EditContent" InitialContent="@Post.Content" />
            }
            else
            {
                var sanitizer = new HtmlSanitizer();
                var content = sanitizer.Sanitize(Post.Content);
            
                @((MarkupString)content)
            }
        </div>
    </div>
    <div class="card-footer pt-0">
        <div class="mb-6">
            <div class="separator separator-solid"></div>
            <ul class="nav py-3">
                <li class="nav-item">
                    <a @onclick="ToggleComments" @onclick:preventDefault href="#" class="nav-link btn btn-sm btn-color-gray-600 btn-active-color-primary fw-bold px-4 me-1 @(ShowComments ? "active" : "")">
                        <i class="bx bx-message fs-2 me-1"></i>
                        @(CommentsCount) Comment(s)
                    </a>
                </li>
                <li class="nav-item">
                    <a @onclick="ToggleLike" @onclick:preventDefault href="#" class="nav-link btn btn-sm btn-color-gray-600 btn-active-color-danger fw-bold px-4 me-1 @(HasLiked ? "active" : "")">
                        @if (HasLiked)
                        {
                            <i class="bx bxs-heart fs-2 me-1"></i>
                        }
                        else
                        {
                            <i class="bx bx-heart fs-2 me-1"></i>
                        }
                        @(LikesCount) Like(s)
                    </a>
                </li>
                @if (Post.Author.Id == IdentityService.CurrentUser.Id || IdentityService.Permissions[Permission.AdminCommunity])
                {
                    <li class="nav-item">
                        <div class="nav-link pt-0">
                            <a @onclick="() => ToggleEdit()" @onclick:preventDefault href="#" class="btn btn-sm btn-color-gray-600 btn-active-color-warning fw-bold px-4 pe-0 @(IsEditing ? "active" : "")">
                                <i class="bx bx-edit fs-2"></i>
                                @(IsEditing ? "Save" : "Edit")
                            </a>

                            @if (IsEditing)
                            {
                                <a @onclick="() => ToggleEdit(true)" @onclick:preventDefault href="#" class="btn btn-sm btn-color-gray-600 btn-active-color-warning fw-bold px-4 ps-2 @(IsEditing ? "active" : "")">
                                    <i class="bx bx-x fs-2"></i>
                                    Cancel
                                </a>
                            }
                        </div>
                    </li>
                }
            </ul>
            <div class="separator separator-solid mb-1"></div>
            @if (ShowComments)
            {
                <LazyLoader Load="LoadComments">
                    @if (Comments.Any())
                    {
                        foreach (var comment in Comments)
                        {
                            <div class="d-flex pt-6">
                                <div class="symbol symbol-45px me-5">
                                    <img src="/api/bucket/avatars/@(comment.Author.Avatar)" alt="">
                                </div>
                                <div class="d-flex flex-column flex-row-fluid">
                                    <div class="d-flex align-items-center flex-wrap mb-0">
                                        <a href="#" class="text-gray-800 text-hover-primary fw-bold me-6">@(comment.Author.Username)</a>
                                        <span class="text-gray-500 fw-semibold fs-7 me-5">@(Formatter.FormatAgoFromDateTime(comment.CreatedAt))</span>

                                        @if (comment.Author.Id == IdentityService.CurrentUser.Id || IdentityService.Permissions[Permission.AdminCommunity])
                                        {
                                            <a @onclick="() => DeleteComment(comment)" @onclick:preventDefault href="#" class="text-danger fw-semibold fs-7">Remove comment</a>
                                        }
                                    </div>
                                    <span class="text-gray-800 fs-6 fw-normal pt-1">
                                        @(Formatter.FormatLineBreaks(comment.Content))
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="d-flex pt-6 justify-content-center">
                            <span class="fs-5">No comments... yet</span>
                        </div>
                    }
                    <div class="separator separator-solid mt-6"></div>
                </LazyLoader>
            }
        </div>
        <div class="d-flex align-items-center">
            <div class="symbol symbol-35px me-3">
                <img src="/api/bucket/avatars/@(IdentityService.CurrentUser.Avatar)" alt="">
            </div>
            <div class="position-relative w-100">
                <div class="input-group">
                    <textarea @bind="Comment" type="text" class="form-control form-control-solid border ps-5" placeholder="Write your comment.." style="height: 1vh"></textarea>
                    <WButton OnClick="CreateComment" Text="Comment" CssClasses="btn btn-primary"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public Post Post { get; set; }

    [Parameter]
    public Func<Task>? OnUpdate { get; set; }

    private int CommentsCount = -1;
    private int LikesCount = -1;
    private bool HasLiked = false;

    private bool ShowComments = false;
    private PostComment[] Comments = Array.Empty<PostComment>();
    private string Comment = "";

    private bool IsEditing = false;
    private string EditTitle = "";
    private string EditContent = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateCounts();
        }
    }

    private Task LoadComments(LazyLoader _)
    {
        Comments = PostRepository
            .Get()
            .Include(x => x.Comments)
            .ThenInclude(x => x.Author)
            .First(x => x.Id == Post.Id)
            .Comments
            .OrderBy(x => x.CreatedAt)
            .ToArray();

        return Task.CompletedTask;
    }

    private async Task UpdateCounts()
    {
        CommentsCount = PostRepository
            .Get()
            .Where(x => x.Id == Post.Id)
            .SelectMany(x => x.Comments)
            .Count();

        LikesCount = PostRepository
            .Get()
            .Where(x => x.Id == Post.Id)
            .SelectMany(x => x.Likes)
            .Count();

        HasLiked = PostRepository
            .Get()
            .Where(x => x.Id == Post.Id)
            .SelectMany(x => x.Likes)
            .Any(x => x.User.Id == IdentityService.CurrentUser.Id);

        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateComment()
    {
        await PostService.CreateComment(Post, IdentityService.CurrentUser, Comment);

        Comment = "";
        ShowComments = true;
        await LoadComments(null!);
        await InvokeAsync(StateHasChanged);
        await UpdateCounts();
    }

    private async Task DeleteComment(PostComment comment)
    {
        await PostService.DeleteComment(Post, comment);

        await LoadComments(null!);
        await InvokeAsync(StateHasChanged);
        await UpdateCounts();

        await ToastService.Success("Successfully deleted comment");
    }

    private async Task ToggleComments()
    {
        ShowComments = !ShowComments;
        await InvokeAsync(StateHasChanged);

        if (!ShowComments)
            Comments = Array.Empty<PostComment>(); // Clear unused data
    }

    private async Task ToggleLike()
    {
        await PostService.ToggleLike(Post, IdentityService.CurrentUser);
        await UpdateCounts();
    }

    private async Task ToggleEdit(bool preventSaving = false)
    {
        IsEditing = !IsEditing;

        if (IsEditing)
        {
            EditTitle = Post.Title;
            EditContent = Post.Content;
        }
        else if (!preventSaving)
        {
            await PostService.Update(Post, EditTitle, EditContent);
            await ToastService.Success("Successfully saved post");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeletePost()
    {
        await PostService.Delete(Post);
        await ToastService.Success("Successfully deleted post");

        if (OnUpdate != null)
            await OnUpdate.Invoke();
    }
}