@page "/admin/users"

@using Moonlight.Core.UI.Components.Navigations
@using MoonCore.Abstractions
@using Moonlight.Core.Database.Entities
@using MoonCore.Exceptions
@using Moonlight.Core.Models.Abstractions
@using Moonlight.Core.Models.Forms.Users

@inject AlertService AlertService
@inject IAuthenticationProvider AuthenticationProvider

@attribute [RequirePermission(1000)]

<AdminUsersNavigation Index="0"/>

<AutoCrud TItem="User"
          TCreateForm="CreateUserForm"
          TUpdateForm="UpdateUserForm"
          Loader="Load"
          CustomAdd="Add"
          ValidateUpdate="ValidateUpdate">
    <View>
        <MCBColumn TItem="User" Field="@(x => x.Id)" Title="Id" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.Email)" Title="Email" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.Username)" Title="Username" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.CreatedAt)" Title="Created at"/>
    </View>@*
    <UpdateActions>
        <WButton OnClick="() => ChangePassword(context)" CssClasses="btn btn-info me-2">
            <i class="bx bx-sm bxs-key"></i>
            Change password
        </WButton>
    </UpdateActions>*@
</AutoCrud>

@code
{
    private IEnumerable<User> Load(Repository<User> repository)
    {
        return repository.Get();
    }

    private async Task ChangePassword(User user)
    {
        await AlertService.Text("", "Enter a new password for {user.Username}", async newPassword =>
        {
            // This handles empty and canceled input
            if (string.IsNullOrEmpty(newPassword))
                return;

            await AuthenticationProvider.ChangePassword(user, newPassword);
        });
    }

    private async Task Add(User user)
    {
        var result = await AuthenticationProvider.Register(user.Username, user.Email, user.Password);

        if (result == null)
            throw new DisplayException("An unknown error occured while creating user");
    }

    // To notify the authentication provider before we update the data in the database, we call it here
    private async Task ValidateUpdate(User user)
    {
        await AuthenticationProvider.ChangeDetails(user, user.Email, user.Username);
    }
}