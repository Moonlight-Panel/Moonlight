@page "/admin/users"

@using System.ComponentModel.DataAnnotations
@using Moonlight.Core.UI.Components.Navigations
@using MoonCore.Abstractions
@using MoonCore.Blazor.Forms.Fast.Components
@using MoonCore.Blazor.Models.Fast
@using MoonCore.Blazor.Models.Fast.Validators
@using Moonlight.Core.Database.Entities
@using MoonCore.Exceptions
@using Moonlight.Core.Models.Abstractions
@using Moonlight.Core.Models.Forms.Users

@inject AlertService AlertService
@inject IAuthenticationProvider AuthenticationProvider

@attribute [RequirePermission(1000)]

<AdminUsersNavigation Index="0"/>

<FastCrud TItem="User"
          Search="Search"
          OnConfigure="OnConfigure"
          OnConfigureCreate="OnConfigureCreate"
          OnConfigureEdit="OnConfigureEdit">
    <View>
        <MCBColumn TItem="User" Field="@(x => x.Id)" Title="Id" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.Email)" Title="Email" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.Username)" Title="Username" Filterable="true"/>
        <MCBColumn TItem="User" Field="@(x => x.CreatedAt)" Title="Created at"/>
    </View>
    <EditToolbar>
        <WButton OnClick="() => ChangePassword(context)" CssClasses="btn btn-info me-2">
            <i class="bx bx-sm bxs-key"></i>
            Change password
        </WButton>
    </EditToolbar>
</FastCrud>

@code
{
    private async Task ChangePassword(User user)
    {
        await AlertService.Text($"Change password for '{user.Username}'", "Enter a new password for {user.Username}", async newPassword =>
        {
            // This handles empty and canceled input
            if (string.IsNullOrEmpty(newPassword))
                return;

            await AuthenticationProvider.ChangePassword(user, newPassword);
        });
    }
    
    private void OnConfigure(FastCrudConfiguration<User> configuration)
    {
        configuration.CustomCreate = async user =>
        {
            var result = await AuthenticationProvider.Register(user.Username, user.Email, user.Password);

            if (result == null)
                throw new DisplayException("An unknown error occured while creating user");
        };

        configuration.ValidateEdit = async user =>
        {
            await AuthenticationProvider.ChangeDetails(user, user.Email, user.Username);
        };
    }

    private void OnConfigureCreate(FastConfiguration<User> configuration)
    {
        configuration.AddProperty(x => x.Username)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation(RegexValidator.Create("^[a-z][a-z0-9]*$", "Usernames can only contain lowercase characters and numbers and should not start with a number"))
            .WithValidation<string>(x => x.Length >= 6 ? ValidationResult.Success : new ValidationResult("The username is too short"))
            .WithValidation<string>(x => x.Length <= 20 ? ValidationResult.Success : new ValidationResult("The username cannot be longer than 20 characters"));

        configuration.AddProperty(x => x.Email)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation(RegexValidator.Create("^.+@.+$", "You need to enter a valid email address"));

        configuration.AddProperty(x => x.Password)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation<string>(x => x.Length >= 8 ? ValidationResult.Success : new ValidationResult("The password must be at least 8 characters long"))
            .WithValidation<string>(x => x.Length <= 256 ? ValidationResult.Success : new ValidationResult("The password must not be longer than 256 characters"));
    }

    private void OnConfigureEdit(FastConfiguration<User> configuration, User currentUser)
    {
        configuration.AddProperty(x => x.Username)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation(RegexValidator.Create("^[a-z][a-z0-9]*$", "Usernames can only contain lowercase characters and numbers and should not start with a number"))
            .WithValidation<string>(x => x.Length >= 6 ? ValidationResult.Success : new ValidationResult("The username is too short"))
            .WithValidation<string>(x => x.Length <= 20 ? ValidationResult.Success : new ValidationResult("The username cannot be longer than 20 characters"));

        configuration.AddProperty(x => x.Email)
            .WithDefaultComponent()
            .WithValidation(FastValidators.Required)
            .WithValidation(RegexValidator.Create("^.+@.+$", "You need to enter a valid email address"));

        configuration.AddProperty(x => x.Totp)
            .WithComponent<bool, SwitchComponent>()
            .WithName("Two factor authentication")
            .WithDescription("This toggles the use of the two factor authentication");
    }

    private IEnumerable<User> Search(IEnumerable<User> source, string term)
    {
        return source.Where(x => x.Username.Contains(term) || x.Email.Contains(term));
    }
}