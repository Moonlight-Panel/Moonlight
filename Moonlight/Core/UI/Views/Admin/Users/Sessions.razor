@page "/admin/users/sessions"
@using BlazorTable
@using MoonCore.Helpers
@using Moonlight.Core.Extensions.Attributes
@using Moonlight.Core.Models.Abstractions
@using Moonlight.Core.Models.Enums
@using Moonlight.Core.Services

@attribute [RequirePermission(Permission.AdminSessions)]

@inject SessionService SessionService

<AdminUsersNavigation Index="1"/>

<Tooltip>
    This list shows you every user connected to this moonlight instance. Its updated in realtime
</Tooltip>

<div class="card mt-5">
    <div class="card-body">
        <LazyLoader Load="Load">
            <Table TableItem="Session"
                   Items="SessionService.Sessions"
                   PageSize="50"
                   TableClass="table table-row-bordered table-row-gray-100 align-middle gs-0 gy-3 fs-6"
                   TableHeadClass="fw-bold text-muted">
                <Column TableItem="Session" Title="IP" Field="@(x => x.Ip)" Sortable="true" Filterable="true"/>
                <Column TableItem="Session" Title="URL" Field="@(x => x.Url)" Sortable="true" Filterable="true">
                    <Template>
                        <a target="_blank" href="@(context.Url)">@(context.Url)</a>
                    </Template>
                </Column>
                <Column TableItem="Session" Title="User" Field="@(x => x.User)" Sortable="false" Filterable="false">
                    <Template>
                        @if (context.User == null)
                        {
                            <span>Guest</span>
                        }
                        else
                        {
                            <a href="/admin/users/view/@(context.User.Id)">@(context.User.Username)</a>
                        }
                    </Template>
                </Column>
                <Column TableItem="Session" Title="Last activity" Field="@(x => x.UpdatedAt)" Sortable="true" Filterable="true">
                    <Template>
                        <span>@(Formatter.FormatUptime(DateTime.UtcNow - context.UpdatedAt))</span>
                    </Template>
                </Column>
                <Column TableItem="Session" Title="Connected since" Field="@(x => x.UpdatedAt)" Sortable="true" Filterable="true">
                    <Template>
                        <span>@(Formatter.FormatUptime(DateTime.UtcNow - context.CreatedAt))</span>
                    </Template>
                </Column>
                <Pager ShowPageNumber="true" ShowTotalCount="true" AlwaysShow="true"/>
            </Table>
        </LazyLoader>
    </div>
</div>

@code
{
    private Task Load(LazyLoader _)
    {
        Task.Run(async () =>
        {
            while (true)
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(1));
            }
        });

        return Task.CompletedTask;
    }
}