@page "/admin/users/sessions"

@using Moonlight.Core.UI.Components.Navigations
@using Moonlight.Core.Services
@using MoonCore.Helpers
@using Moonlight.Core.Models

@inject SessionService SessionService
@inject AlertService AlertService
@inject ToastService ToastService

@attribute [RequirePermission(1000)]

@implements IDisposable

<AdminUsersNavigation Index="1"/>

<LazyLoader Load="Load">
    <Tooltip>
        This list shows you every user connected to this moonlight instance. Its updated in realtime
    </Tooltip>

    <div class="card mt-5">
        <div class="card-body px-6 py-4">
            <LazyLoader Load="Load">
                <MCBTable @ref="Table"
                          TItem="Session"
                          ItemSource="SessionService.Sessions"
                          PageSize="50">
                    <MCBColumn TItem="Session" Title="User" Field="@(x => x.CreatedAt)">
                        <Template>
                            @if (context.IdentityService.IsAuthenticated)
                            {
                                var user = context.IdentityService.GetUser();
                                
                                <a target="_blank" href="/admin/users/view/@(user.Id)">
                                    @(user.Email)
                                </a>
                            }
                            else
                            {
                                <span>Guest</span>
                            }
                        </Template>
                    </MCBColumn>
                    <MCBColumn TItem="Session" Title="URL" Field="@(x => x.CreatedAt)">
                        <Template>
                            <a target="_blank" href="@(context.NavigationManager.Uri)">
                                @(context.NavigationManager.Uri)
                            </a>
                        </Template>
                    </MCBColumn>
                    <MCBColumn TItem="Session" Title="Last activity" Field="@(x => x.UpdatedAt)" Filterable="true">
                        <Template>
                            <span>@(Formatter.FormatUptime(DateTime.UtcNow - context.UpdatedAt))</span>
                        </Template>
                    </MCBColumn>
                    <MCBColumn TItem="Session" Title="Connected since" Field="@(x => x.CreatedAt)" Filterable="true">
                        <Template>
                            <span>@(Formatter.FormatUptime(DateTime.UtcNow - context.CreatedAt))</span>
                        </Template>
                    </MCBColumn>
                    <MCBColumn TItem="Session" Title="Actions">
                        <Template>
                            <div class="d-flex justify-content-end">
                                <div class="btn btn-group">
                                    <WButton OnClick="() => Message(context)" CssClasses="btn btn-primary">Message</WButton>
                                    <WButton OnClick="() => Redirect(context)" CssClasses="btn btn-warning">Redirect</WButton>
                                </div>
                            </div>
                        </Template>
                    </MCBColumn>
                </MCBTable>
            </LazyLoader>
        </div>
    </div>
</LazyLoader>

@code
{
    private MCBTable<Session>? Table;
    private Timer? UpdateTimer;

    private Task Load(LazyLoader _)
    {
        UpdateTimer = new Timer(async _ =>
        {
            if (Table != null)
                await Table.Refresh(isSilent: true, fullRefresh: true);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        return Task.CompletedTask;
    }

    private async Task Redirect(Session session)
    {
        await AlertService.Text("Redirect to", "Enter the target url to redirect to", async url =>
        {
            if (string.IsNullOrEmpty(url))
                return;

            try
            {
                session.NavigationManager.NavigateTo(url);

                await ToastService.Success("Successfully redirected user session");
            }
            catch (Exception)
            {
                await ToastService.Danger("Unable to redirect user. The user is probably no longer connect with moonlight");
            }
        });
    }

    private async Task Message(Session session)
    {
        await AlertService.Text("Send message", "Enter the message you want to send", async message =>
        {
            if (string.IsNullOrEmpty(message))
                return;

            try
            {
                await session.AlertService.Info(message);

                await ToastService.Success("Successfully sent message to user session");
            }
            catch (Exception)
            {
                await ToastService.Danger("Unable to send message. The user is probably no longer connect with moonlight");
            }
        });
    }

    public void Dispose()
    {
        if (UpdateTimer != null)
            UpdateTimer.Dispose();
    }
}