@page "/admin/sys"

@using Moonlight.Core.UI.Components.Navigations
@using Moonlight.Core.Services
@using Moonlight.Core.Helpers
@using MoonCore.Helpers

@inject MoonlightService MoonlightService
@inject HostSystemHelper HostSystemHelper

@attribute [RequirePermission(9999)]

@implements IDisposable

<AdminSysNavigation Index="0"/>

<div class="row g-5 mt-5">
    <LazyLoader Load="LoadStatistics">
        <div class="col-md-3 col-12">
            @{
                var cpuUsageText = $"{CpuUsage}%";
            }
            
            <StatCard Value="@cpuUsageText" Description="Cpu usage" Icon="bxs-chip"/>
        </div>
        <div class="col-md-3 col-12">
            @{
                var memoryUsageText = Formatter.FormatSize(MemoryUsage);
            }
            
            <StatCard Value="@memoryUsageText" Description="Memory usage" Icon="bxs-microchip"/>
        </div>
        <div class="col-md-3 col-12">
            @{
                var uptimeText = Formatter.FormatUptime(Uptime);
            }
            
            <StatCard Value="@uptimeText" Description="Uptime" Icon="bxs-time-five"/>
        </div>
        <div class="col-md-3 col-12">
            @if (MoonlightService.IsDockerRun)
            {
                <StatCard Value="Running in docker" Description="Operating system" Icon="bxl-docker"/>
            }
            else
            {
                <StatCard Value="@OsName" Description="Operating system" Icon="bx-fingerprint"/>
            }
        </div>
        <div class="col-md-3 col-12">
            @{
                var commitHashShorted = string.IsNullOrEmpty(MoonlightService.BuildCommitHash) || MoonlightService.BuildCommitHash.Length < 7
                    ? "N/A"
                    : MoonlightService.BuildCommitHash.Substring(0, 7); 
                
                // TODO: Add update check (possible during startup, with error handling etc)
            }
            
            <StatCard Value="@commitHashShorted" Description="Commit" Icon="bxl-git"/>
        </div>
        <div class="col-md-3 col-12">
            <StatCard Value="@MoonlightService.BuildChannel" Description="Channel" Icon="bx-git-branch"/>
        </div>
        <div class="col-md-3 col-12">
            <StatCard Value="@MoonlightService.BuildName" Description="Name" Icon="bxs-bookmark"/>
        </div>
        <div class="col-md-3 col-12">
            <StatCard Value="@MoonlightService.BuildVersion" Description="Version" Icon="bxs-purchase-tag"/>
        </div>
    </LazyLoader>
</div>

<SectionTitle>Actions</SectionTitle>

<div class="row">
    <div class="col-md-3 col-12">
        <div class="card card-body p-5">
            <div class="row">
                <div class="col-3 text-center d-flex align-items-center">
                    <i class="bx bx-lg text-white align-middle bx-refresh"></i>
                </div>
                <div class="col-9 d-flex align-items-center">
                    <ConfirmButton OnClick="_ => MoonlightService.Restart()" CssClasses="btn btn-lg btn-danger w-100">Restart</ConfirmButton>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private string OsName;
    private int CpuUsage;
    private long MemoryUsage;
    private TimeSpan Uptime;
    private Timer? UpdateTimer;

    private async Task LoadStatistics(LazyLoader lazyLoader)
    {
        await lazyLoader.SetText("Loading system statistics");

        if(!MoonlightService.IsDockerRun)
            OsName = await HostSystemHelper.GetOsName();
        
        CpuUsage = await HostSystemHelper.GetCpuUsage();
        MemoryUsage = await HostSystemHelper.GetMemoryUsage();
        Uptime = await MoonlightService.GetUptime();

        UpdateTimer = new(async _ =>
        {
            CpuUsage = await HostSystemHelper.GetCpuUsage();
            MemoryUsage = await HostSystemHelper.GetMemoryUsage();
            Uptime = await MoonlightService.GetUptime();

            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    public void Dispose()
    {
        UpdateTimer?.Dispose();
    }
}