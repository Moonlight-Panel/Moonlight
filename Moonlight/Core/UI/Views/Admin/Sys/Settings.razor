@using System.ComponentModel
@using System.Linq.Expressions
@using Moonlight.Core.UI.Components.Navigations
@using System.Reflection
@using MoonCore.Services
@using Moonlight.Core.Configuration

@inject ConfigService<CoreConfiguration> ConfigService
@inject ToastService ToastService

@attribute [RequirePermission(9999)]

<AdminSysNavigation Index="1"/>

@if (CurrentModel == null)
{
    <IconAlert Title="No resource to show" Icon="bx-x">
        No model found to show. Please refresh the page to go back
    </IconAlert>
}
else
{
    <div class="mt-5">
        <Tooltip>
            Changes to these settings are live applied. The save button only make the changes persistently saved to disk
        </Tooltip>
    </div>

    <div class="card mt-5 mb-5">
        <div class="card-header border-bottom-0">
            <h3 class="card-title">
                @if (Path.Length == 0)
                {
                    <span>Configuration</span>
                }
                else
                {
                    <span class="text-muted">
                        <span class="align-middle">Configuration</span>
                        
                        @foreach (var subPart in Path.SkipLast(1))
                        {
                            <i class="bx bx-sm bx-chevron-right me-1 align-middle"></i>
                            <span class="align-middle">@subPart</span>
                        }
                    </span>
                    <span>
                        <i class="bx bx-sm bx-chevron-right align-middle text-muted"></i>
                        <span class="align-middle">@Path.Last()</span>
                    </span>
                }
            </h3>
            <div class="card-toolbar">
                <WButton OnClick="Reload" CssClasses="btn btn-icon btn-warning me-3">
                    <i class="bx bx-sm bx-revision"></i>
                </WButton>
                <WButton OnClick="Save" CssClasses="btn btn-icon btn-success">
                    <i class="bx bx-sm bx-save"></i>
                </WButton>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-3 col-12 mb-5">
            <div class="card card-body">
                @foreach (var item in SidebarItems)
                {
                    <div class="d-flex flex-stack">
                        <div class="d-flex align-items-center flex-row-fluid flex-wrap">
                            <a href="/admin/sys/settings?section=@(Section + "/" + item)" class="fs-4 text-primary">
                                @item
                            </a>
                        </div>
                    </div>
                }

                @if (Path.Length != 0)
                {
                    <div class="d-flex flex-stack @(SidebarItems.Length != 0 ? "mt-5" : "")">
                        <div class="d-flex align-items-center flex-row-fluid flex-wrap">
                            <a href="/admin/sys/@(GetBackPath())" class="fs-4 text-primary">Back</a>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-9 col-12">
            <LazyLoader @ref="LazyLoader" Load="Load" UseDefaultValues="false" TimeUntilSpinnerIsShown="TimeSpan.Zero">
                @Content
            </LazyLoader>
        </div>
    </div>
}

@code
{
    [Parameter] [SupplyParameterFromQuery] public string? Section { get; set; } = "";
    
    private object? CurrentModel;
    private string[] SidebarItems = [];
    private string[] Path = [];

    private LazyLoader? LazyLoader;
    private RenderFragment Content;

    protected override async Task OnParametersSetAsync()
    {
        if (Section != null && Section.StartsWith("/"))
            Section = Section.TrimStart('/');

        Path = Section != null ? Section.Split("/") : [];

        CurrentModel = Resolve(ConfigService.Get(), Path, 0);

        if (CurrentModel == null)
        {
            SidebarItems = [];
        }
        else
        {
            var props = CurrentModel
                .GetType()
                .GetProperties()
                .ToArray();

            SidebarItems = props
                .Where(x =>
                    x.PropertyType.IsClass &&
                    x.PropertyType.Namespace!.StartsWith("Moonlight")
                )
                .Select(x => x.Name)
                .ToArray();
        }

        await InvokeAsync(StateHasChanged);

        if (LazyLoader != null)
            await LazyLoader.Reload();
    }

    private string GetBackPath()
    {
        if (Path.Length == 1)
            return "settings";
        
        var path = string.Join('/', Path.Take(Path.Length - 1)).TrimEnd('/');
        return $"settings?section={path}";
    }

    private object? Resolve(object model, string[] path, int index)
    {
        if (path.Length == 0)
            return model;

        if (path.Length == index)
            return model;

        var prop = model
            .GetType()
            .GetProperties()
            .FirstOrDefault(x => x.PropertyType.Assembly.FullName!.Contains("Moonlight") && x.Name == path[index]);

        if (prop == null)
            return null;

        return Resolve(prop.GetValue(model)!, path, index + 1);
    }

    private Task Load(LazyLoader _)
    {
        Content = ComponentHelper.FromType(typeof(DynamicFormBuilder<>).MakeGenericType(CurrentModel.GetType()), parameters =>
        {
            parameters.Add("Model", CurrentModel);
        });

        return Task.CompletedTask;
    }

    private async Task Save() // Saves all changes to disk, all changes are live updated as the config service reference will be edited directly
    {
        ConfigService.Save();
        await ToastService.Success("Successfully saved config to disk");
    }

    private async Task Reload() // This will also discard all unsaved changes
    {
        ConfigService.Reload();
        await ToastService.Info("Reloaded configuration from disk");
    }
}