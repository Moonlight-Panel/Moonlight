@using Moonlight.Core.Models.Abstractions
@using Moonlight.Core.Models.Enums
@using Moonlight.Core.Services
@using Moonlight.Core.Services.Utils
@using Moonlight.Core.Event
@using Moonlight.Core.UI.Components.Auth
@using Moonlight.Features.Advertisement.Services
@using Moonlight.Features.Advertisement.UI.Components
@using MoonCoreUI.Services
@using MoonCore.Services
@using Moonlight.Core.Configuration

@inherits LayoutComponentBase
@implements IDisposable

@inject CookieService CookieService
@inject ConfigService<ConfigV1> ConfigService
@inject IdentityService IdentityService
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject ConnectionService ConnectionService
@inject AdBlockService AdBlockService
@inject HotKeyService HotKeyService

@{
    var url = new Uri(Navigation.Uri);
}

@if (Initialized)
{
    if (IdentityService.IsSignedIn)
    {
        if (!IdentityService.Flags[UserFlag.MailVerified] && ConfigService.Get().Security.EnableEmailVerify)
        {
            <OverlayLayout>
                <MailVerify/>
            </OverlayLayout>
        }
        else if (IdentityService.Flags[UserFlag.PasswordPending])
        {
            <OverlayLayout>
                <ChangePassword/>
            </OverlayLayout>
        }
        else if (RestartLock)
        {
            <OverlayLayout>
                <RestartAlert/>
            </OverlayLayout>
        }
        else if (ConfigService.Get().Advertisement.PreventAdBlockers && AdBlockerDetected)
        {
            <OverlayLayout>
                <AdBlockAlert />
            </OverlayLayout>
        }
        else
        {
            <DefaultLayout>
                <SoftErrorHandler>
                    <PermissionChecker>
                        @Body
                    </PermissionChecker>
                </SoftErrorHandler>
            </DefaultLayout>
        }
    }
    else
    {
        if (url.LocalPath == "/register")
        {
            <OverlayLayout>
                <Register/>
            </OverlayLayout>
        }
        else if (url.LocalPath == "/password-reset")
        {
            <OverlayLayout>
                <PasswordReset/>
            </OverlayLayout>
        }
        else
        {
            <OverlayLayout>
                <Login/>
            </OverlayLayout>
        }
    }
}
else
{
    <OverlayLayout>
        <div class="w-100">
            <div class="card-body">
                <div class="text-center mb-10">
                    <h1 class="text-dark mb-3 fs-4">
                        Connecting to the remote server
                    </h1>
                    <div class="text-gray-400 fw-semibold fs-6">
                        <div class="text-success">
                            <div class="spinner-border me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </OverlayLayout>
}

@code
{
    private bool Initialized = false;
    private bool RestartLock = false;
    private bool AdBlockerDetected = false;

    private Session? MySession;

    protected override void OnInitialized()
    {
        IdentityService.OnAuthenticationStateChanged += async (_, _) =>
        {
            if (MySession != null)
            {
                MySession.User = IdentityService.CurrentUserNullable;
                MySession.UpdatedAt = DateTime.UtcNow;
            }

            await InvokeAsync(StateHasChanged);
        };

        Navigation.LocationChanged += (_, _) =>
        {
            if (MySession != null)
            {
                MySession.Url = Navigation.Uri;
                MySession.UpdatedAt = DateTime.UtcNow;
            }
        };

        Events.OnMoonlightRestart += async (_, _) =>
        {
            RestartLock = true;
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await CookieService.GetValue("token");
            await IdentityService.Authenticate(token);

            MySession = new()
            {
                Ip = await ConnectionService.GetIpAddress(),
                Url = Navigation.Uri,
                User = IdentityService.CurrentUserNullable
            };

            await SessionService.Register(MySession);
            
            if(ConfigService.Get().Advertisement.PreventAdBlockers)
                AdBlockerDetected = await AdBlockService.Detect();

            await HotKeyService.Initialize();

            Initialized = true;

            await InvokeAsync(StateHasChanged);
        }
    }

    public async void Dispose() // This method will be called if the user closes his tab
    {
        if (MySession != null)
            await SessionService.Unregister(MySession);
    }
}