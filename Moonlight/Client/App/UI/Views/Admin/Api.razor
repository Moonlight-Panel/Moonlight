@page "/admin/api"
@using MoonCore.Extensions
@using MoonCore.Helpers
@using Moonlight.Client.App.Models.Crud
@using Moonlight.Client.App.Services
@using Moonlight.Client.App.UI.Components.Forms.Components
@using Moonlight.Shared.Http.Requests.Admin.ApiKeys
@using Moonlight.Shared.Http.Resources
@using Moonlight.Shared.Http.Resources.Admin.ApiKeys

@inject HttpApiClient HttpApiClient
@inject AlertService AlertService

@attribute [RequirePermission("admin.apikeys.get")]

<ViewTitle Text="API & API Keys" />

<div class="mt-5 gap-5 grid grid-cols-1 lg:grid-cols-3">
    <div class="relative overflow-hidden rounded-lg bg-slate-800 px-4 pb-5 pt-5 shadow">
        <div>
            <p class="ml-2 truncate text-sm font-medium text-slate-500">Lookup all available endpoints and models</p>
        </div>

        <div class="ml-2 flex items-baseline">
            <p class="text-2xl font-semibold text-white">
                <a href="/apidocs" target="_blank" class="text-blue-500">Api reference<i class="bi bi-box-arrow-up-right ml-1 inline-block"></i></a>
            </p>
        </div>
    </div>

    <div class="relative overflow-hidden rounded-lg bg-slate-800 px-4 pb-5 pt-5 shadow">
        <div>
            <p class="ml-2 truncate text-sm font-medium text-slate-500">Find out how to use this api</p>
        </div>

        <div class="ml-2 flex items-baseline">
            <p class="text-2xl font-semibold text-white">
                <a href="https://docs.moonlightpanel.xyz" target="_blank" class="text-blue-500">Documentation<i class="bi bi-box-arrow-up-right ml-1 inline-block"></i></a>
            </p>
        </div>
    </div>

    <div class="relative overflow-hidden rounded-lg bg-slate-800 px-4 pb-5 pt-5 shadow">
        <div>
            <p class="ml-2 truncate text-sm font-medium text-slate-500">Generate api clients using this specification</p>
        </div>

        <div class="ml-2 flex items-baseline">
            <p class="text-2xl font-semibold text-white">
                <a href="/apidocs/swagger/main" target="_blank" class="text-blue-500">Open API Specification<i class="bi bi-box-arrow-up-right ml-1 inline-block"></i></a>
            </p>
        </div>
    </div>
</div>

<div class="mt-5">
    <SmartCrud TItem="DetailApiKeyResponse"
               TCreateForm="CreateApiKeyRequest"
               TUpdateForm="UpdateApiKeyRequest"
               OnConfigure="OnConfigure">
        <View>
            <SmartColumn TItem="DetailApiKeyResponse" Field="@(x => x.Name)" Title="Name" />
            <SmartColumn TItem="DetailApiKeyResponse" Field="@(x => x.Description)" Title="Description" />
            <SmartColumn TItem="DetailApiKeyResponse" Field="@(x => x.ExpireDate)" Title="Expire date">
                <Template>
                    @(Formatter.FormatDate(context.ExpireDate))
                </Template>
            </SmartColumn>
        </View>
    </SmartCrud>
</div>

@code
{
    private void OnConfigure(CrudOptions<DetailApiKeyResponse, CreateApiKeyRequest, UpdateApiKeyRequest> options)
    {
        options.Loader = async (page, pageSize) => 
            await HttpApiClient.GetJson<PagedResponse<DetailApiKeyResponse>>($"admin/apikeys?page={page}&pageSize={pageSize}");

        options.CreateFunction = async request =>
        {
            var result = await HttpApiClient.PostJson<CreateApiKeyResponse>("admin/apikeys", request);

            await AlertService.Success("API Key successfully created", $"The api key is: \"{result.Key}\". This key wont be shown again");
        };

        options.UpdateFunction = async (request, item) =>
        {
            await HttpApiClient.Patch($"admin/apikeys/{item.Id}", request);
        };

        options.DeleteFunction = async item =>
        {
            await HttpApiClient.Delete($"admin/apikeys/{item.Id}");
        };

        options.OnConfigureCreate = option =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Name);
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Description);
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.PermissionsJson)
                .WithComponent<TagComponent>()
                .WithName("Permissions")
                .WithColumns(6)
                .WithDefaultValue("[]");
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.ExpireDate)
                .WithDefaultValue(DateTime.UtcNow.AddMonths(1));
        };

        options.OnConfigureUpdate = (option, _) =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Name);

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Description);

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.PermissionsJson)
                .WithComponent<TagComponent>()
                .WithName("Permissions")
                .WithColumns(6);

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.ExpireDate);
        };
    }
}
