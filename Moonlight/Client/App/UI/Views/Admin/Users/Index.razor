@page "/admin/users"

@using MoonCore.Extensions
@using Moonlight.Client.App.Models.Crud
@using Moonlight.Client.App.Services
@using Moonlight.Shared.Http.Resources
@using Moonlight.Shared.Http.Resources.Admin.Users
@using Moonlight.Client.App.UI.Components.Forms.Components
@using Moonlight.Shared.Http.Requests.Admin.Users

@inject HttpApiClient HttpApiClient

@attribute [RequirePermission("admin.users.get")]

<ViewTitle Text="Users" />

<div class="mt-5">
    <SmartCrud TItem="DetailUserResponse"
               TCreateForm="CreateUserRequest"
               TUpdateForm="UpdateUserRequest"
               OnConfigure="OnConfigure">
        <View>
            <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Id)" Title="Id" />
            <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Username)" Title="Username" />
            <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Email)" Title="Email" />
        </View>
    </SmartCrud>
</div>

@code
{
    private void OnConfigure(CrudOptions<DetailUserResponse, CreateUserRequest, UpdateUserRequest> options)
    {
        options.Loader = async (page, pageSize) => 
            await HttpApiClient.GetJson<PagedResponse<DetailUserResponse>>($"admin/users?page={page}&pageSize={pageSize}");

        options.OnConfigureCreate = option =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Username)
                .WithColumns(6);
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Email)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "email";
                });
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Password)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "password";
                });

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.PermissionsJson)
                .WithColumns(6)
                .WithName("Permissions")
                .WithComponent<TagComponent>();
        };

        options.OnConfigureUpdate = (option, _) =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Username)
                .WithColumns(6);

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Email)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "email";
                });
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Password)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "password";
                })
                .WithDescription("Optional");
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.PermissionsJson)
                .WithColumns(6)
                .WithName("Permissions")
                .WithComponent<TagComponent>();
        };
        
        options.CreateFunction = async request =>
        {
            await HttpApiClient.Post("admin/users", request);
        };

        options.UpdateFunction = async (request, item) =>
        {
            await HttpApiClient.Patch($"admin/users/{item.Id}", request);
        };

        options.DeleteFunction = async item =>
        {
            await HttpApiClient.Delete($"admin/users/{item.Id}");
        };
    }
}
