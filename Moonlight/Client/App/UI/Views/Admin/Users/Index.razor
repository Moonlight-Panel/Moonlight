@page "/admin/users"
@using MoonCore.Extensions
@using Moonlight.Client.App.Models.Crud
@using Moonlight.Client.App.Services
@using Moonlight.Shared.Http.Resources
@using Moonlight.Shared.Http.Resources.Admin.Users
@using Moonlight.Client.App.UI.Components
@using Moonlight.Client.App.UI.Components.Forms.Components
@using Moonlight.Shared.Http.Requests.Admin.Users

@inject IdentityService IdentityService

<SmartCrud TItem="DetailUserResponse"
           TCreateForm="CreateUserRequest"
           TUpdateForm="UpdateUserRequest"
           OnConfigure="OnConfigure">
    <View>
        <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Id)" Title="Id" />
        <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Username)" Title="Username" />
        <SmartColumn TItem="DetailUserResponse" Field="@(x => x.Email)" Title="Email" />
    </View>
</SmartCrud>

@code
{
    private void OnConfigure(CrudOptions<DetailUserResponse, CreateUserRequest, UpdateUserRequest> options)
    {
        options.Loader = async (page, pageSize) =>
        {
            var response = await IdentityService.Http.GetAsync($"admin/users?page={page}&pageSize={pageSize}");

            await response.HandlePossibleApiError();

            return await response.ParseAsJson<PagedResponse<DetailUserResponse>>();
        };

        options.OnConfigureCreate = option =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Username)
                .WithColumns(6);
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Email)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "email";
                });
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Password)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "password";
                });
        };

        options.OnConfigureUpdate = option =>
        {
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Username)
                .WithColumns(6);

            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Email)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "email";
                });
            
            option
                .DefaultPage
                .DefaultSection
                .AddProperty(x => x.Password)
                .WithColumns(6)
                .WithComponent<StringComponent>(component =>
                {
                    component.Type = "password";
                })
                .WithDescription("Optional");
        };
        
        options.CreateFunction = async request =>
        {
            var response = await IdentityService.Http.PostAsJsonAsync("admin/users", request);

            await response.HandlePossibleApiError();
        };

        options.UpdateFunction = async (request, item) =>
        {
            var response = await IdentityService.Http.PatchAsJsonAsync($"admin/users/{item.Id}", request);

            await response.HandlePossibleApiError();
        };

        options.DeleteFunction = async item =>
        {
            var response = await IdentityService.Http.DeleteAsync($"admin/users/{item.Id}");

            await response.HandlePossibleApiError();
        };
    }
}
