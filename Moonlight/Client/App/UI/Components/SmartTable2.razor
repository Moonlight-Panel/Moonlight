@using Moonlight.Shared.Http.Resources
@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@{
    string tableRounding;
    var isSpecialBody = IsLoading || TotalItemsCount == 0;

    if (isSpecialBody)
    {
        if (DisableHeadRounding)
            tableRounding = "";
        else
            tableRounding = "rounded-t-lg";
    }
    else
    {
        if (DisableHeadRounding)
            tableRounding = "rounded-b-lg";
        else
            tableRounding = "rounded-lg";
    }
}

<div class="overflow-x-auto @(tableRounding)">
    <table class="w-full text-sm text-left rtl:text-right text-slate-100">
        <thead class="text-xs uppercase bg-slate-700 text-slate-400">
        <tr>
            @if (IsLoading)
            {
                <th scope="col" class="text-center px-6 py-2">Loading</th>
            }
            else
            {
                foreach (var column in Columns)
                {
                    <th scope="col" class="@(column.HeadCssClasses ?? "px-6 py-2")">
                        <div class="flex items-center">
                            @if (column.HeadTemplate == null)
                            {
                                @column.Title

                                if (column.Sortable)
                                {
                                    <a @onclick:preventDefault @onclick="() => TriggerSorting(column)" href="#" class="pl-1">
                                        <i class="bx bx-sort-alt-2 text-base align-middle @(column.SortingEnabled ? "text-slate-900 text-white" : "")"></i>
                                    </a>
                                }

                                if (column.Filterable)
                                {
                                    <a @onclick:preventDefault @onclick="() => ToggleShowFilter(column)" href="#" class="pl-1">
                                        <i class="bx bx-search-alt text-base align-middle @(string.IsNullOrEmpty(column.Filter) ? "" : "text-slate-900 text-white")"></i>
                                    </a>

                                    if (column.ShowFilter)
                                    {
                                        <div class="translate-y-20 normal-case font-normal absolute z-10 w-48 p-3  rounded-lg shadow bg-slate-700 block">
                                            <h6 class="mb-3 text-sm font-medium  text-white">Set filter</h6>
                                            <div class="text-sm">
                                                <input @bind:event="oninput" @bind="column.Filter" @onkeydown="eventArgs => OnFilterInputKeyDown(column, eventArgs)" type="text" autofocus="autofocus" class="block w-full p-2 text-sm  border  rounded-lg  bg-slate-600 border-slate-500 placeholder-slate-400 text-white" placeholder="Filter...">
                                            </div>
                                        </div>
                                    }
                                }
                            }
                            else
                            {
                                @column.HeadTemplate
                            }
                        </div>
                    </th>
                }
            }
        </tr>
        </thead>

        @if (!isSpecialBody && TotalItemsCount != 0)
        {
            var i = 1;

            <tbody>
            @foreach (var item in CurrentItems)
            {
                <tr class="bg-slate-800 @(i != CurrentItems.Length ? "border-b border-slate-700" : "")">
                    @foreach (var column in Columns)
                    {
                        <th scope="row" class="@(column.CssClasses ?? "px-6 py-2 whitespace-nowrap font-normal")">
                            @if (column.Template == null)
                            {
                                @column.CompiledField.Invoke(item)
                            }
                            else
                            {
                                @column.Template.Invoke(item)
                            }
                        </th>
                    }
                </tr>

                i++;
            }
            </tbody>
        }
    </table>
</div>

@if (isSpecialBody)
{
    <div class="bg-slate-800 rounded-b-lg">
        @if (IsLoading)
        {
            <div class="flex justify-center flex-col items-center py-8">
                <div role="status">
                    <svg aria-hidden="true" class="inline w-10 h-10  animate-spin text-slate-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-3 text-lg  text-slate-300">
                    Processing items
                </p>
            </div>
        }
        else if (TotalItemsCount == 0)
        {
            <div class="flex justify-center py-8">
                <IconAlert Icon="bi bi-boxes"
                           Color="text-violet-500"
                           Title="No items found"
                           Description="We were unable to find any items. Try changing filter options if you set any."/>
            </div>
        }
    </div>
}

<nav class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
    <span class="text-sm font-normal  text-slate-400">
        @{
            var start = 0;
            var end = 0;

            if (TotalItemsCount != 0)
            {
                start = CurrentPage * PageSize + 1;

                var fullEnd = CurrentPage * PageSize + PageSize;

                if (TotalItemsCount < fullEnd)
                    end = CurrentPage * PageSize + (TotalItemsCount - start + 1);
                else
                    end = fullEnd;
            }
        }

        Showing
        <span class="font-semibold  text-white">@(start)-@(end)</span>
        of
        <span class="font-semibold  text-white">
            @TotalItemsCount
        </span>
    </span>
    <div class="flex">
        @if (CurrentPage == 0)
        {
            <button class="flex items-center justify-center px-3 h-8 text-sm font-medium   border  rounded-lg   bg-slate-800 border-slate-700 text-slate-400 hover:bg-slate-700 hover:text-white disabled:border-slate-700 disabled:bg-slate-800 disabled:text-slate-600 disabled:cursor-not-allowed" disabled="disabled">
                Previous
            </button>
        }
        else
        {
            <button @onclick="() => NavigatePage(-1)" class="flex items-center justify-center px-3 h-8 text-sm font-medium   border  rounded-lg   bg-slate-800 border-slate-700 text-slate-400 hover:bg-slate-700 hover:text-white">
                Previous
            </button>
        }

        @if (CurrentPage == TotalPages || TotalItemsCount == 0)
        {
            <button class="ms-3 lex items-center justify-center px-3 h-8 text-sm font-medium   border  rounded-lg   bg-slate-800 border-slate-700 text-slate-400 hover:bg-slate-700 hover:text-white disabled:border-slate-700 disabled:bg-slate-800 disabled:text-slate-600 disabled:cursor-not-allowed" disabled="disabled">
                Next
            </button>
        }
        else
        {
            <button @onclick="() => NavigatePage(1)" class="ms-3 flex items-center justify-center px-3 h-8 text-sm font-medium   border  rounded-lg   bg-slate-800 border-slate-700 text-slate-400 hover:bg-slate-700 hover:text-white">
                Next
            </button>
        }
    </div>
</nav>


@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public Func<int, int, Task<PagedResponse<TItem>>> ItemsCallback { get; set; }

    [Parameter] public RenderFragment? NoItemView { get; set; }

    [Parameter] public bool DisableHeadRounding { get; set; } = false;
    [Parameter] public int PageSize { get; set; } = 15;

    private readonly List<SmartColumn<TItem>> Columns = new();

    private int CurrentPage = 0;
    private int TotalItemsCount = 0;
    private int TotalPages;
    public TItem[] CurrentItems { get; private set; } = [];

    private bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await Refresh();
    }

    public async Task Refresh(bool silent = false)
    {
        if (!silent) // If no silent reload is request, show the loading screen
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
        }

        // Load the items of the current page
        var response = await ItemsCallback.Invoke(CurrentPage, PageSize);
        TotalPages = response.TotalPages;
        TotalItemsCount = response.TotalItems;
        CurrentItems = response.Items;

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    public void AddColumn(SmartColumn<TItem> column) => Columns.Add(column);

    private async Task NavigatePage(int diff)
    {
        CurrentPage += diff;

        if (CurrentPage < 0)
            CurrentPage = 0;

        if (CurrentPage > TotalPages)
            CurrentPage = TotalPages;

        await Refresh();
    }

    private async Task TriggerSorting(SmartColumn<TItem> column)
    {
        if (!column.SortingEnabled)
            column.SortingEnabled = true;

        column.SortingValue = !column.SortingValue;

        await InvokeAsync(StateHasChanged);
        await Refresh();
    }

    private async Task ToggleShowFilter(SmartColumn<TItem> column)
    {
        await SetShowFilter(column, !column.ShowFilter);
    }

    private async Task SetShowFilter(SmartColumn<TItem> column, bool b)
    {
        column.ShowFilter = b;

        await InvokeAsync(StateHasChanged);

        if (!column.ShowFilter)
            await Refresh();
    }

    private async Task OnFilterInputKeyDown(SmartColumn<TItem> column, KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code != "Enter")
            return;

        await SetShowFilter(column, false);
    }
}