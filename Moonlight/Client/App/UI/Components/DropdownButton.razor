<div class="relative inline-block text-left">
    <div>
        <button @onclick="() => SetShow(true)" type="button" class="inline-flex w-full justify-center gap-x-1.5 rounded-md px-3 py-2 text-sm font-semibold shadow-sm border @CssClasses" id="menu-button" aria-expanded="true" aria-haspopup="true">
            @(Text)
            <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"/>
            </svg>
        </button>
    </div>

    @if (Show)
    {
        <div @ref="Reference" @onfocusout="FocusOut" autofocus="autofocus" class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-slate-600 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
            <div class="py-1" role="none">
                @ChildContent
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public string CssClasses { get; set; } = "bg-slate-800 text-slate-400 border-slate-600 hover:text-white hover:bg-slate-700";
    [Parameter] public string Text { get; set; } = "N/A";
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private bool Show = false;
    private ElementReference? Reference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Show && Reference != null)
            await Reference.Value.FocusAsync();
    }

    private async Task FocusOut()
    {
        await Task.Delay(200);
        await SetShow(false);
    }

    private async Task SetShow(bool b)
    {
        Show = b;
        await InvokeAsync(StateHasChanged);
    }
}