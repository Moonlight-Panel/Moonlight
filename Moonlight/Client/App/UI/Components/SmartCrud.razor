@using MoonCore.Helpers
@using Moonlight.Client.App.Models.Crud
@using Moonlight.Client.App.Models.Forms
@using Moonlight.Client.App.Services
@using Moonlight.Client.App.UI.Components.Modals
@using Moonlight.Client.App.UI.Components.Forms

@typeparam TItem
@typeparam TCreateForm
@typeparam TUpdateForm

@inject ModalService ModalService
@inject ToastService ToastService
@inject AlertService AlertService

@if (ShowCreatePage)
{
    <div class="bg-slate-800 py-3 rounded-lg">
        <div class="font-normal text-white text-lg ml-3">
            <div class="flex items-center">
                <i class="bi bi-chevron-left text-slate-300"></i>
                <span class="ml-2">Create</span>
            </div>
        </div>
    </div>

    <div class="px-5 py-3 mt-5 bg-slate-800 rounded-lg">
        <SmartForm Model="CreateForm" OnSubmit="() => RunCreate(CreateForm)">
            <SmartGeneratedForm Model="CreateForm" OnConfigure="CreateFormConfigure"/>

            <div class="mt-3 flex justify-end">
                <button type="submit" class="text-white font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none inline-flex items-center justify-center bg-indigo-600 hover:bg-indigo-700 me-2">
                    Create
                </button>

                <WButton OnClick="_ => GoToView()" CssClasses="bg-slate-600 hover:bg-slate-700">Cancel</WButton>
            </div>
        </SmartForm>
    </div>
}
else if (ShowUpdatePage)
{
    <div class="bg-slate-800 py-3 rounded-lg">
        <div class="font-normal text-white text-lg ml-3">
            <div class="flex items-center">
                <i class="bi bi-chevron-left text-slate-300"></i>
                <span class="ml-2">Update</span>
            </div>
        </div>
    </div>

    <div class="px-5 py-3 mt-3 bg-slate-800 rounded-lg">
        <SmartForm Model="UpdateForm" OnSubmit="() => RunUpdate(UpdateForm)">
            <SmartGeneratedForm Model="UpdateForm" OnConfigure="UpdateFormConfigure"/>

            <div class="mt-3 flex justify-end">
                <button type="submit" class="text-white font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none inline-flex items-center justify-center bg-indigo-600 hover:bg-indigo-700 me-2">
                    Update
                </button>

                <WButton OnClick="_ => GoToView()" CssClasses="bg-slate-600 hover:bg-slate-700">Cancel</WButton>
            </div>
        </SmartForm>
    </div>
}
else if (ShowDetailsPage)
{
    <div class="bg-slate-800 py-3 rounded-lg">
        <div class="font-normal text-white text-lg ml-3">
            <div class="flex items-center">
                <i class="bi bi-chevron-left text-slate-300"></i>
                <span class="ml-2">Details</span>
            </div>
        </div>
    </div>

    <div class="px-5 mt-3">
        @DetailView.Invoke(ItemToShowDetails)

        <div class="mt-3 flex justify-end">
            <WButton OnClick="_ => GoToView()" CssClasses="bg-slate-600 hover:bg-slate-700">Back</WButton>
        </div>
    </div>
}
else
{
    <div class="bg-slate-800 rounded-lg">
        <SmartTable2 @ref="Table" TItem="TItem" ItemsCallback="Options.Loader">
            <SmartColumn TItem="TItem" HeadCssClasses="pl-2 w-5" CssClasses="pl-2 w-5">
                <HeadTemplate>
                    @if (SelectedItems.Count == Table.CurrentItems.Length && Table.CurrentItems.Length != 0)
                    {
                        <input @onclick="() => ChangeAllSelection(false)" checked="checked" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                    else
                    {
                        <input @onclick="() => ChangeAllSelection(true)" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                </HeadTemplate>
                <Template>
                    @if (SelectedItems.Contains(context))
                    {
                        <input @onclick="() => ChangeSelection(context, false)" checked="checked" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                    else
                    {
                        <input @onclick="() => ChangeSelection(context, true)" type="checkbox" class="h-4 w-4 rounded bg-slate-900 border-slate-700 text-indigo-600 focus:ring-indigo-600">
                    }
                </Template>
            </SmartColumn>

            @View.Invoke(this)

            <SmartColumn TItem="TItem" HeadCssClasses="">
                <HeadTemplate>
                    <div class="flex items-center justify-end space-x-2 py-1 font-normal mr-2">
                        <button @onclick="LaunchCreate" type="button" class="flex items-center justify-center text-white font-medium rounded-lg text-sm px-3 py-1.5 bg-indigo-600 hover:bg-indigo-700 focus:outline-none">
                            <svg class="h-3.5 w-3.5 mr-2" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"/>
                            </svg>
                            Create
                        </button>

                        @if (Actions != null)
                        {
                            @Actions
                        }

                        <DropdownButton Text="Actions" Small="true">
                            <a @onclick="StartDeleteSection" @onclick:preventDefault href="#" class="block px-4 py-2 text-sm text-white" role="menuitem">
                                Delete selection
                            </a>

                            @if (SelectionActions != null)
                            {
                                @SelectionActions.Invoke(SelectedItems.ToArray())
                            }
                        </DropdownButton>
                    </div>
                </HeadTemplate>
                <Template>
                    <div class="flex justify-end items-center">
                        <a @onclick:preventDefault @onclick="() => LaunchUpdate(context)" href="#" class="text-blue-500 hover:underline mr-5">Edit</a>
                        <a @onclick:preventDefault @onclick="() => LaunchDelete(context)" href="#">
                            <i class="bi bi-trash3-fill text-xl text-red-500"></i>
                        </a>
                    </div>
                </Template>
            </SmartColumn>
        </SmartTable2>
    </div>
}

@code
{
    [Parameter] public RenderFragment<SmartCrud<TItem, TCreateForm, TUpdateForm>> View { get; set; }
    [Parameter] public Action<CrudOptions<TItem, TCreateForm, TUpdateForm>> OnConfigure { get; set; }

    [Parameter] public RenderFragment<TItem[]>? SelectionActions { get; set; }
    [Parameter] public RenderFragment? Actions { get; set; }

    private CrudOptions<TItem, TCreateForm, TUpdateForm> Options = new();

    private SmartTable2<TItem> Table;

    private List<TItem> SelectedItems = new();
    private TItem ItemToUpdate;

    private bool ShowCreatePage = false;
    private bool ShowUpdatePage = false;

    private TCreateForm CreateForm;
    private TUpdateForm UpdateForm;

    private Action<SmartFormOption<TCreateForm>> CreateFormConfigure;
    private Action<SmartFormOption<TUpdateForm>> UpdateFormConfigure;

    // Details

    [Parameter] public RenderFragment<TItem> DetailView { get; set; }
    private TItem ItemToShowDetails;
    private bool ShowDetailsPage = false;

    protected override void OnInitialized()
    {
        OnConfigure.Invoke(Options);
    }

    private async Task RefreshView()
    {
        SelectedItems.Clear();
        await Table.Refresh();

        await InvokeAsync(StateHasChanged);
    }

    private async Task GoToView()
    {
        ShowCreatePage = false;
        ShowUpdatePage = false;
        ShowDetailsPage = false;

        await InvokeAsync(StateHasChanged);
    }

    #region Create

    private async Task LaunchCreate()
    {
        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        CreateFormConfigure = Options.OnConfigureCreate;

        if (Options.ShowCreateAsModal)
        {
            await ModalService.Launch<FormModal<TCreateForm>>(buildAttributes: parameters =>
            {
                parameters.Add("Title", "Create");
                parameters.Add("Form", CreateForm);
                parameters.Add("OnConfigure", CreateFormConfigure);
                parameters.Add("OnSubmit", (Func<TCreateForm, Task>)RunCreate);
            }, size: "2xl");
        }
        else
        {
            ShowCreatePage = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RunCreate(TCreateForm _)
    {
        await Options.CreateFunction.Invoke(CreateForm);

        await ToastService.Success("Successfully added item");

        if (!Options.ShowCreateAsModal)
        {
            ShowCreatePage = false;
            await InvokeAsync(StateHasChanged);
        }

        await RefreshView();
    }

    #endregion

    #region Delete

    private async Task LaunchDelete(TItem item)
    {
        await AlertService.DangerConfirm("Do you really want to delete this item?",
            () => RunDelete(item),
            "bi bi-trash3-fill"
        );
    }

    private async Task RunDelete(TItem item)
    {
        await Options.DeleteFunction.Invoke(item);

        await ToastService.Success("Successfully deleted item");
        await RefreshView();
    }

    private async Task StartDeleteSection()
    {
        if (SelectedItems.Count == 0)
            return;

        await AlertService.DangerConfirm($"Do you really want to delete {SelectedItems.Count} item(s)?",
            RunDeleteSelection,
            "bi bi-trash3-fill"
        );
    }

    private async Task RunDeleteSelection()
    {
        var count = SelectedItems.Count;

        foreach (var item in SelectedItems)
            await Options.DeleteFunction.Invoke(item);

        await ToastService.Success($"Successfully deleted {count} item(s)");
        await RefreshView();
    }

    #endregion

    #region Update

    private async Task LaunchUpdate(TItem item)
    {
        ItemToUpdate = item;
        UpdateForm = Mapper.Map<TUpdateForm>(ItemToUpdate!)!;
        UpdateFormConfigure = option => Options.OnConfigureUpdate.Invoke(option, ItemToUpdate);

        if (Options.ShowUpdateAsModal)
        {
            await ModalService.Launch<FormModal<TUpdateForm>>(buildAttributes: parameters =>
            {
                parameters.Add("Title", "Update");
                parameters.Add("Form", UpdateForm);
                parameters.Add("OnConfigure", UpdateFormConfigure);
                parameters.Add("OnSubmit", (Func<TUpdateForm, Task>)RunUpdate);
            }, size: "2xl");
        }
        else
        {
            ShowUpdatePage = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RunUpdate(TUpdateForm _)
    {
        await Options.UpdateFunction.Invoke(UpdateForm, ItemToUpdate);

        if (!Options.ShowUpdateAsModal)
        {
            ShowUpdatePage = false;
            await InvokeAsync(StateHasChanged);
        }

        await ToastService.Success("Successfully updated item");
        await RefreshView();
    }

    #endregion

    #region Details

    public async Task LaunchDetails(TItem item)
    {
        ItemToShowDetails = item;

        if (Options.ShowDetailsAsModal)
        {
            await ModalService.Launch<ComponentModal>(buildAttributes: parameters =>
            {
                parameters.Add("Title", "Details");
                parameters.Add("Component", DetailView.Invoke(ItemToShowDetails));
            }, size: "2xl");
        }
        else
        {
            ShowDetailsPage = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    #region Selection

    private Task ChangeSelection(TItem item, bool isSelected)
    {
        if (isSelected)
        {
            if (!SelectedItems.Contains(item))
                SelectedItems.Add(item);
        }
        else
        {
            if (SelectedItems.Contains(item))
                SelectedItems.Remove(item);
        }

        return Task.CompletedTask;
    }

    private Task ChangeAllSelection(bool isSelected)
    {
        SelectedItems.Clear();

        if (isSelected)
            SelectedItems.AddRange(Table.CurrentItems);

        return Task.CompletedTask;
    }

    #endregion

}