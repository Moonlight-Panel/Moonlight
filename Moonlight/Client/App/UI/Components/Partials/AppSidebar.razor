@using Moonlight.Client.App.Interfaces
@using Moonlight.Client.App.Models
@using Moonlight.Client.App.PluginApi
@using Moonlight.Client.App.Services

@inject PluginService PluginService
@inject NavigationManager Navigation
@inject IdentityService IdentityService

@{
    var uri = new Uri(Navigation.Uri);
}

<div class="relative z-50 xl:hidden" role="dialog" aria-modal="true">
    <div class="fixed inset-0 bg-black opacity-30" style="@(MainLayout.MobileSidebarToggle ? "" : "display: none")"></div>
    <div class="fixed inset-0 flex" style="@(MainLayout.MobileSidebarToggle ? "" : "display: none")">
        <div class="relative mr-16 flex w-full max-w-xs flex-1">
            <div class="absolute left-full top-0 flex w-16 justify-center pt-5">
                <button @onclick="() => MainLayout.ToggleMobileSidebar()" type="button" class="-m-2.5 p-2.5">
                    <span class="sr-only">Close sidebar</span>
                    <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>

            <div class="flex grow flex-col gap-y-5 overflow-y-auto bg-gray-900 px-6 ring-1 ring-white/10">
                <div class="flex h-16 shrink-0 items-center">
                    <img class="h-8 w-auto" src="https://gamecp.masuowo.xyz/api/core/asset/Core/svg/logo.svg" alt="Moonlight">
                </div>
                <nav class="flex flex-1 flex-col">
                    <ul role="list" class="flex flex-1 flex-col gap-y-7">
                        @foreach (var itemGroup in Items)
                        {
                            <li>
                                @if (!string.IsNullOrEmpty(itemGroup.Key))
                                {
                                    <div class="text-sm font-semibold leading-6 text-gray-400 mb-5">@itemGroup.Key</div>
                                }

                                <ul role="list" class="-mx-2 space-y-1">
                                    @foreach (var item in itemGroup.Value)
                                    {
                                        var isActive = item.RequiresExactMatch ? item.Target == uri.AbsolutePath : uri.AbsolutePath.StartsWith(item.Target);

                                        <li>
                                            <a href="@(item.Target)" class="@(isActive ? "bg-gray-800 text-white" : "text-gray-400 hover:text-white hover:bg-gray-800") group flex items-center gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold">
                                                <i class="@(item.Icon) text-xl ml-1"></i>
                                                @item.Name
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }

                        <li class="-mx-6 mt-auto">
                            <a href="#" class="flex items-center gap-x-4 px-6 py-3 text-sm font-semibold leading-6 text-white hover:bg-gray-800">
                                <img class="h-8 w-8 rounded-full bg-gray-800" src="https://cdn.discordapp.com/avatars/223109865197928448/e889ef9433f126009c01a0f20e3b7759.webp?size=128" alt="">
                                <span class="sr-only">Your profile</span>
                                <span aria-hidden="true">@("@" + IdentityService.Username)</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<div class="hidden xl:fixed xl:inset-y-0 xl:z-50 xl:flex xl:w-72 xl:flex-col">
    <div class="flex grow flex-col gap-y-5 overflow-y-auto bg-black/10 px-6 ring-1 ring-white/5">
        <div class="flex h-16 shrink-0 items-center">
            <img class="h-8 w-auto" src="https://gamecp.masuowo.xyz/api/core/asset/Core/svg/logo.svg" alt="Moonlight logo">
        </div>
        <nav class="flex flex-1 flex-col">
            <ul role="list" class="flex flex-1 flex-col gap-y-7">
                @foreach (var itemGroup in Items)
                {
                    <li>
                        @if (!string.IsNullOrEmpty(itemGroup.Key))
                        {
                            <div class="text-sm font-semibold leading-6 text-gray-400 mb-5">@itemGroup.Key</div>
                        }

                        <ul role="list" class="-mx-2 space-y-1">
                            @foreach (var item in itemGroup.Value)
                            {
                                var isActive = item.RequiresExactMatch ? item.Target == uri.AbsolutePath : uri.AbsolutePath.StartsWith(item.Target);

                                <li>
                                    <a href="@(item.Target)" class="@(isActive ? "bg-gray-800 text-white" : "text-gray-400 hover:text-white hover:bg-gray-800") group flex items-center gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold">
                                        <i class="@(item.Icon) text-xl ml-1"></i>
                                        @item.Name
                                    </a>
                                </li>
                            }
                        </ul>
                    </li>
                }

                <li class="-mx-6 mt-auto">
                    <a href="#" class="flex items-center gap-x-4 px-6 py-3 text-sm font-semibold leading-6 text-white hover:bg-gray-800">
                        <img class="h-8 w-8 rounded-full bg-gray-800" src="https://cdn.discordapp.com/avatars/223109865197928448/e889ef9433f126009c01a0f20e3b7759.webp?size=128" alt="">
                        <span class="sr-only">Your profile</span>
                        <span aria-hidden="true">@("@" + IdentityService.Username)</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code
{
    [Parameter] public MainLayout MainLayout { get; set; }

    private Dictionary<string, SidebarItem[]> Items = new();

    protected override void OnInitialized()
    {
        Items = PluginService.GetImplementations<ISidebarItemProvider>()
            .SelectMany(x => x.GetItems())
            .GroupBy(x => x.Group)
            .OrderByDescending(x => string.IsNullOrEmpty(x.Key))
            .ToDictionary(x => x.Key, x => x.OrderBy(y => y.Priority).ToArray());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Navigation.LocationChanged += async (_, _) => await InvokeAsync(StateHasChanged);
    }
}