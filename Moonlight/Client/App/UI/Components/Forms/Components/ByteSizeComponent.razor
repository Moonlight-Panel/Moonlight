@inherits BaseSmartFormComponent<int>

<div class="relative mt-2 rounded-md shadow-sm">
    <input @bind="ValueInUnit" type="number" class="block w-full bg-slate-800 rounded-md border-0 py-1.5 pr-20 text-white ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6">
    <div class="absolute inset-y-0 right-0 flex items-center">
        <select @bind="Unit" class="h-full rounded-md border-0 bg-transparent focus:bg-slate-800 py-0 pl-2 pr-7 text-slate-300 sm:text-sm border-transparent focus:border-transparent focus:ring-0">
            @if (MinimumUnitInt <= 0)
            {
                <option value="0">KB</option>
            }
            @if (MinimumUnitInt <= 1)
            {
                <option value="1">MB</option>
            }
            @if (MinimumUnitInt <= 2)
            {
                <option value="2">GB</option>
            }
        </select>
    </div>
</div>

@code
{
    [Parameter] public string MinimumUnit { get; set; } = "KB";
    [Parameter] public string DefaultUnit { get; set; } = "KB";
    [Parameter] public int Converter { get; set; } = 0;

    private int Unit;

    private int MinimumUnitInt;
    private int DefaultUnitInt;

    private long ValueInUnit
    {
        get => (long)(KiloBytes / Math.Pow(1024D, Unit));
        set => KiloBytes = (long)(value * Math.Pow(1024D, Unit));
    }

    private long KiloBytes
    {
        get => (long)(Binder.Value * Math.Pow(1024D, Converter));
        set => Binder.Value = (int)(value / Math.Pow(1024D, Converter));
    }

    protected override void OnInitialized()
    {
        DefaultUnitInt = UnitToIndex(DefaultUnit);
        MinimumUnitInt = UnitToIndex(MinimumUnit);

        if (DefaultUnitInt < MinimumUnitInt)
            Unit = MinimumUnitInt;
        else
            Unit = DefaultUnitInt;
    }

    private int UnitToIndex(string unit)
    {
        switch (unit)
        {
            default:
                return 0;
            case "MB":
                return 1;
            case "GB":
                return 2;
        }
    }
}