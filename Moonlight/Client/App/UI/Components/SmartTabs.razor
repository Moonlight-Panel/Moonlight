<CascadingValue TValue="SmartTabs" Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

@if (NavStyle)
{
    <div class="text-base font-medium text-center text-slate-300">
        <ul class="flex flex-wrap -mb-px">
            @foreach (var tab in Tabs)
            {
                if (CurrentTab == tab)
                {
                    <a href="#" @onclick:preventDefault class="inline-block mt-3 me-3 px-1 pb-3 border-b-2 rounded-t-lg active text-white border-indigo-500" aria-current="page">
                        @tab.Name
                    </a>
                }
                else
                {
                    <a href="#" @onclick:preventDefault @onclick="() => SwitchTab(tab)" class="inline-block mt-3 me-3 px-1 pb-3 border-transparent rounded-t-lg hover:text-white hover:border-b-2 hover:border-indigo-500">
                        @tab.Name
                    </a>
                }
            }
        </ul>
    </div>
}
else if (BarStyle)
{
    <div class="bg-slate-800 rounded-lg">
        <div class="font-normal text-white text-lg ml-3 flex flex-row">
            <div class="flex items-center">
                <div class="my-3">
                    <i class="bi bi-chevron-left text-slate-300"></i>
                    <a href="#" @onclick:preventDefault @onclick="() => BarClick.Invoke()" class="ml-2 hidden sm:inline">
                        @BarText
                    </a>
                </div>
            </div>

            <div class="ml-4 sm:ml-10 flex items-end overflow-x-scroll sm:overflow-x-auto overflow-y-clip no-scrollbar">
                <div class="mb-0.5">
                    <ul class="flex flex-row -mb-px text-base">
                        @foreach (var tab in Tabs)
                        {
                            if (CurrentTab == tab)
                            {
                                <a href="#" @onclick:preventDefault class="inline-block me-3 px-1 pb-2.5 border-b-2 rounded-t-lg active text-white border-indigo-500" aria-current="page">
                                    @tab.Name
                                </a>
                            }
                            else
                            {
                                <a href="#" @onclick:preventDefault @onclick="() => SwitchTab(tab)" class="inline-block me-3 px-1 pb-2.5 border-transparent rounded-t-lg hover:text-white hover:border-b-2 hover:border-indigo-500">
                                    @tab.Name
                                </a>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-sm font-medium text-center border-b text-slate-400 border-slate-700 mb-5">
        <ul class="flex flex-wrap -mb-px">
            @foreach (var tab in Tabs)
            {
                if (CurrentTab == tab)
                {
                    <li class="me-2">
                        <a @onclick:preventDefault href="#" class="inline-block p-4 border-b-2 rounded-t-lg active text-indigo-500 border-indigo-500" aria-current="page">
                            @tab.Name
                        </a>
                    </li>
                }
                else
                {
                    <li class="me-2">
                        <a @onclick="() => SwitchTab(tab)" @onclick:preventDefault href="#" class="inline-block p-4 border-transparent rounded-t-lg hover:text-slate-300">
                            @tab.Name
                        </a>
                    </li>
                }
            }
        </ul>
    </div>
}

@if (CurrentTab != null)
{
    <div class="mt-5">
        @CurrentTab.ChildContent
    </div>
}

@code
{
    [Parameter] public bool NavStyle { get; set; } = false;
    [Parameter] public bool BarStyle { get; set; } = false;

    [Parameter] public Func<Task> BarClick { get; set; }
    [Parameter] public string BarText { get; set; } = "";

    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<SmartTab> Tabs = new();
    private SmartTab? CurrentTab = null;

    public void AddTab(SmartTab tab)
    {
        if (!Tabs.Contains(tab))
            Tabs.Add(tab);
    }

    public async Task SwitchTab(SmartTab tab)
    {
        CurrentTab = tab;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        CurrentTab = Tabs.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
    }
}